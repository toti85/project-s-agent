#!/usr/bin/env python3
"""
KRITIKUS DIAGNOSZTIKA: Projekt-S task execution hi√°nya
Bemutatkozza, hogy a rendszer csak besz√©l a feladatokr√≥l, de sosem hajtja v√©gre ≈ëket.
"""
import asyncio
import logging
from datetime import datetime

# Be√°ll√≠tjuk a loggol√°st
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

async def demonstrate_execution_gap():
    """Bemutatkozza a v√©grehajt√°si h√©zagot"""
    
    print("=== KRITIKUS DIAGNOSZTIKA: PROJECT-S EXECUTION GAP ===")
    print("Demonstr√°ljuk, hogy a rendszer csak besz√©l, nem cselekszik\n")
    
    # 1. Megn√©zz√ºk, hogy a tools m≈±k√∂dnek-e k√ºl√∂n
    print("1. TOOL TESZTEL√âS (K√ºl√∂n):")
    from tools.tool_registry import tool_registry
    await tool_registry.load_tools()
    
    write_tool = tool_registry.get_tool("FileWriteTool")
    if write_tool:
        result = await write_tool.execute(
            path="PROOF_TOOLS_WORK.txt",
            content="Ez bizony√≠tja, hogy a tools m≈±k√∂dnek!"
        )
        print(f"   ‚úÖ FileWriteTool m≈±k√∂dik: {result['success']}")
    
    # 2. Most megn√©zz√ºk, hogy a main workflow haszn√°lja-e a tools-okat
    print("\n2. WORKFLOW ANALYSIS:")
    from integrations.model_manager import model_manager
    from integrations.advanced_langgraph_workflow import AdvancedLangGraphWorkflow
    
    # Simul√°ljuk egy feladat v√©grehajt√°s√°t
    print("   Feladat: '√çrj hello world-√∂t egy f√°jlba'")
    
    # Mit csin√°l a model_manager?
    print("   Mit csin√°l a model_manager.execute_task_with_model?")
    result = await model_manager.execute_task_with_model(
        query="√çrj hello world-√∂t egy f√°jlba",
        system_message="Te egy file √≠r√°s√©rt felel≈ës vagy.",
        task_type="file_operation"
    )
    
    print(f"   Model v√°lasz: {result.get('content', 'No content')[:100]}...")
    print(f"   T√≠pus: {type(result)}")
    print(f"   Van-e 'file_created' kulcs: {'file_created' in result}")
    print(f"   Van-e 'tool_executed' kulcs: {'tool_executed' in result}")
    
    # 3. Ellen≈ërizz√ºk, hogy l√©trej√∂tt-e t√©nylegesen valami f√°jl
    print("\n3. VAL√ìDI HAT√ÅS ELLEN≈êRZ√âSE:")
    import os
    files_created = [f for f in os.listdir('.') if f.startswith('hello') or 'hello' in f.lower()]
    print(f"   Hello f√°jlok l√©trehozva: {files_created}")
    
    # 4. A KRITIKUS HIBA MAGYAR√ÅZATA
    print("\n4. üö® KRITIKUS PROBL√âMA AZONOS√çTVA:")
    print("   ‚ùå model_manager.execute_task_with_model() CSAK AI SZ√ñVEGET GENER√ÅL")
    print("   ‚ùå NEM HAJT V√âGRE TOOLS-OKAT")
    print("   ‚ùå NEM CSIN√ÅL VAL√ìDI M≈∞VELETET")
    print("   ‚úÖ Tools k√ºl√∂n-k√ºl√∂n m≈±k√∂dnek")
    print("   üî• A BRIDGE HI√ÅNYZIK AI ‚Üî TOOLS k√∂z√∂tt")
    
    # Cleanup
    if os.path.exists("PROOF_TOOLS_WORK.txt"):
        os.remove("PROOF_TOOLS_WORK.txt")
    
    print("\n=== DIAGN√ìZIS V√âGE ===")

if __name__ == "__main__":
    asyncio.run(demonstrate_execution_gap())
