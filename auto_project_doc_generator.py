"""
Project-S Automatikus Projekt Dokument√°ci√≥ Gener√°l√≥
--------------------------------------------------
Ez a modul a Project-S eszk√∂z rendszer√©t haszn√°lja egy komplex,
t√∂bb AI-t haszn√°l√≥ dokument√°ci√≥ gener√°l√≥ workflow l√©trehoz√°s√°ra.

A script a k√∂vetkez≈ë l√©p√©seket hajtja v√©gre:
1. Projekt f√°jl strukt√∫ra elemz√©se
2. Forr√°sk√≥d anal√≠zise
3. T√∂bb AI modell orkesztr√°l√°sa k√ºl√∂nb√∂z≈ë feladatokra
   - GPT-4: Architekt√∫ra elemz√©s, design patterns felismer√©s
   - Claude: K√≥d min≈ës√©g √©rt√©kel√©s, best practices javaslatok
4. Dokument√°ci√≥ gener√°l√°sa struktur√°lt form√°ban
"""

import asyncio
import logging
import os
import sys
from pathlib import Path
import json
from datetime import datetime
import re
import traceback
from typing import Dict, List, Any, Optional, Tuple, Set

# Hozz√°adjuk a projekt gy√∂k√©rk√∂nyvt√°r√°t a keres√©si √∫tvonalhoz
project_root = Path(__file__).parent
if str(project_root) not in sys.path:
    sys.path.append(str(project_root))

# Konfigur√°ljuk a napl√≥z√°st
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger("auto_doc_generator")

# Project-S importok
try:
    from tools import register_all_tools
    from tools.file_tools import FileSearchTool, FileReadTool, FileWriteTool, FileInfoTool
    from tools.web_tools import WebPageFetchTool
    from tools.code_tools import CodeExecutionTool, PythonModuleInfoTool
    logger.info("Project-S eszk√∂z modulok sikeresen import√°lva")
except ImportError as e:
    logger.error(f"Hiba t√∂rt√©nt a Project-S modulok import√°l√°sakor: {e}")
    sys.exit(1)

# AI integr√°ci√≥ oszt√°ly (mock)
class AIModelIntegration:
    """
    AI modell integr√°ci√≥s oszt√°ly, amely lehet≈ëv√© teszi k√ºl√∂nb√∂z≈ë AI modellek haszn√°lat√°t
    k√ºl√∂nb√∂z≈ë feladatokra.
    
    Val√≥s implement√°ci√≥ eset√©n ez kapcsol√≥dna az OpenAI, Anthropic, stb. API-khoz.
    """
    
    async def analyze_with_model(self, model: str, prompt: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Az adott modellel elemzi a megadott prompt-ot √©s kontextust.
        """
        logger.info(f"[{model}] Elemz√©s a k√∂vetkez≈ë prompt-tal: {prompt[:50]}...")
        
        # Ebben a p√©ld√°ban csak szimul√°lt v√°laszokat gener√°lunk
        if model == "gpt-4":
            result = self._simulate_gpt4_response(prompt, context)
        elif model == "claude-sonnet":
            result = self._simulate_claude_response(prompt, context)
        else:
            result = {"error": f"Ismeretlen modell: {model}"}
            
        return result
    
    def _simulate_gpt4_response(self, prompt: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Szimul√°lja egy GPT-4 v√°lasz√°t (val√≥s implement√°ci√≥ban ez az OpenAI API-t h√≠vn√°).
        """
        if "architecture" in prompt.lower():
            return {
                "model": "gpt-4",
                "content": "# Architekt√∫ra Elemz√©s\n\n"
                          "A Project-S egy modul√°ris, eszk√∂z-alap√∫ √°gens rendszer, amely a k√∂vetkez≈ë f≈ë komponensekb≈ël √°ll:\n\n"
                          "- **Core rendszer**: Alapvet≈ë esem√©nykezel√©s √©s vez√©rl≈ë logika\n"
                          "- **Tools alrendszer**: K√ºl√∂nb√∂z≈ë eszk√∂z√∂k implement√°ci√≥ja egys√©ges interf√©sz alapj√°n\n"
                          "- **LangGraph integr√°ci√≥**: Munkafolyamat-vez√©rl≈ë komponens az eszk√∂z√∂k √∂sszekapcsol√°s√°ra\n\n"
                          "A rendszer f≈ë design pattern-jei k√∂z√© tartozik:\n"
                          "- **Observer pattern**: Az esem√©nykezel≈ë rendszerben\n"
                          "- **Factory pattern**: Az eszk√∂z√∂k dinamikus regisztr√°ci√≥j√°hoz\n"
                          "- **Adapter pattern**: A k√ºls≈ë szolg√°ltat√°sok integr√°l√°s√°hoz\n"
                          "- **Strategy pattern**: A k√ºl√∂nb√∂z≈ë v√©grehajt√°si strat√©gi√°k v√°ltogat√°s√°hoz"
            }
        elif "code structure" in prompt.lower():
            return {
                "model": "gpt-4",
                "content": "# K√≥d Strukt√∫ra Elemz√©s\n\n"
                          "A Project-S k√≥dja j√≥l struktur√°lt, modul√°ris fel√©p√≠t√©s≈±:\n\n"
                          "- `tools/` k√∂nyvt√°r: Az √∂sszes eszk√∂z implement√°ci√≥j√°t tartalmazza\n"
                          "  - `tool_interface.py`: Az alapvet≈ë BaseTool absztrakt oszt√°lyt defini√°lja\n"
                          "  - `tool_registry.py`: Az eszk√∂z√∂k regisztr√°ci√≥j√°t kezeli\n"
                          "  - K√ºl√∂nb√∂z≈ë eszk√∂z t√≠pusok (file_tools.py, web_tools.py, stb.)\n\n"
                          "- `core/` k√∂nyvt√°r: A rendszer magj√°t ad√≥ komponenseket tartalmazza\n\n"
                          "- K√ºl√∂nb√∂z≈ë futtathat√≥ p√©ld√°k √©s tesztek a gy√∂k√©rk√∂nyvt√°rban"
            }
        else:
            return {
                "model": "gpt-4",
                "content": "A Project-S rendszer egy modul√°ris, kiterjeszthet≈ë eszk√∂z-alap√∫ √°gens platform."
            }
    
    def _simulate_claude_response(self, prompt: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Szimul√°lja egy Claude v√°lasz√°t (val√≥s implement√°ci√≥ban ez az Anthropic API-t h√≠vn√°).
        """
        if "best practices" in prompt.lower():
            return {
                "model": "claude-sonnet",
                "content": "# K√≥d Min≈ës√©g √©s Best Practices\n\n"
                          "A Project-S rendszer sz√°mos j√≥ gyakorlatot k√∂vet:\n\n"
                          "## Er≈ëss√©gek\n"
                          "- ‚úÖ **Tiszta interf√©szek**: Az eszk√∂z√∂k j√≥l defini√°lt, egys√©ges interf√©szt k√∂vetnek\n"
                          "- ‚úÖ **Hibakezel√©s**: A k√≥d megfelel≈ëen kezeli a hib√°kat √©s kiv√©teleket\n"
                          "- ‚úÖ **Aszinkronit√°s**: Az asyncio haszn√°lata lehet≈ëv√© teszi a p√°rhuzamos v√©grehajt√°st\n\n"
                          "## Fejleszt√©si lehet≈ës√©gek\n"
                          "- üîÑ **Dokument√°ci√≥**: N√©h√°ny komponens dokument√°ci√≥ja hi√°nyos\n"
                          "- üîÑ **Tesztek**: A tesztlefedetts√©g n√∂velhet≈ë lenne"
            }
        elif "security" in prompt.lower():
            return {
                "model": "claude-sonnet",
                "content": "# Biztons√°gi √ârt√©kel√©s\n\n"
                          "A Project-S rendszer biztons√°gi szempontb√≥l:\n\n"
                          "- ‚úÖ A CodeSandbox haszn√°lata megfelel≈ë homokoz√≥ k√∂rnyezetet biztos√≠t a k√≥d futtat√°s√°hoz\n"
                          "- ‚úÖ A SystemCommandTool szigor√∫ valid√°ci√≥t v√©gez a parancsokra\n"
                          "- ‚úÖ Az eszk√∂z√∂k regisztr√°ci√≥ sor√°n biztons√°gi ellen≈ërz√©sen mennek kereszt√ºl\n\n"
                          "### Javaslatok\n"
                          "- üîí Tov√°bbi input valid√°ci√≥k implement√°l√°sa\n"
                          "- üîí A rendszerparancs v√©grehajt√°s m√©g tov√°bbi korl√°toz√°sokat ig√©nyelhet"
            }
        else:
            return {
                "model": "claude-sonnet",
                "content": "A Project-S eszk√∂z rendszer j√≥l struktur√°lt, megfelel≈ë biztons√°gi mechanizmusokkal rendelkezik, de n√©h√°ny ter√ºleten tov√°bb fejleszthet≈ë."
            }

class ProjectStructureAnalyzer:
    """
    Elemzi a projekt strukt√∫r√°j√°t √©s relev√°ns inform√°ci√≥kat gy≈±jt.
    """
    
    def __init__(self):
        self.file_search_tool = FileSearchTool()
        self.file_read_tool = FileReadTool()
        self.file_info_tool = FileInfoTool()
    
    async def get_project_structure(self, project_path: str, max_depth: int = 3) -> Dict[str, Any]:
        """
        Elemzi a projekt k√∂nyvt√°rszerkezet√©t √©s visszaadja a f≈ëbb komponenseket.
        """
        logger.info(f"Projekt strukt√∫ra elemz√©se: {project_path}")
          # Keress√ºk meg az √∂sszes Python f√°jlt
        python_files = await self.file_search_tool.execute(
            pattern="**/*.py",
            root_dir=project_path,
            recursive=True
        )
        
        # Keress√ºk meg az √∂sszes konfigur√°ci√≥s f√°jlt
        config_files = await self.file_search_tool.execute(
            pattern="**/*.{json,yaml,yml,ini,toml}",
            root_dir=project_path,
            recursive=True
        )
        
        # Keress√ºk meg a dokument√°ci√≥s f√°jlokat
        doc_files = await self.file_search_tool.execute(
            pattern="**/*.{md,rst,txt}",
            root_dir=project_path,
            recursive=True
        )
        
        return {
            "python_files": python_files.get("files", []),
            "config_files": config_files.get("files", []),
            "doc_files": doc_files.get("files", []),
            "project_path": project_path
        }
    
    async def analyze_python_files(self, files: List[str], max_files: int = 20) -> Dict[str, Any]:
        """
        Elemzi a Python f√°jlok tartalm√°t, azonos√≠tja a f≈ëbb oszt√°lyokat, f√ºggv√©nyeket.
        """
        logger.info(f"Python f√°jlok elemz√©se, {len(files)} f√°jl, max {max_files} elemz√©se")
        
        results = []
        
        # Korl√°tozzuk a f√°jlok sz√°m√°t, hogy ne elemezz√ºnk t√∫l sokat
        files = files[:max_files]
        
        for file_path in files:
            try:
                # F√°jl inform√°ci√≥k lek√©rdez√©se
                file_info = await self.file_info_tool.execute(path=file_path)
                
                # F√°jl tartalom olvas√°sa
                file_content = await self.file_read_tool.execute(
                    path=file_path, 
                    max_size=50000  # Korl√°tozzuk a m√©ret√©t
                )
                
                if not file_content.get("success", False):
                    logger.warning(f"Nem siker√ºlt olvasni a f√°jlt: {file_path}")
                    continue
                
                content = file_content.get("content", "")
                
                # Egyszer≈± anal√≠zis - oszt√°lyok √©s f√ºggv√©nyek keres√©se
                classes = re.findall(r"class\s+(\w+)\s*\(", content)
                functions = re.findall(r"def\s+(\w+)\s*\(", content)
                
                # Docstring ellen≈ërz√©se
                has_module_docstring = bool(re.search(r'^"""[\s\S]+?"""', content))
                
                results.append({
                    "path": file_path,
                    "size": file_info.get("size", 0),
                    "last_modified": file_info.get("last_modified", ""),
                    "classes": classes,
                    "functions": functions,
                    "has_module_docstring": has_module_docstring,
                    "lines_of_code": content.count('\n') + 1
                })
            
            except Exception as e:
                logger.error(f"Hiba a f√°jl elemz√©se k√∂zben {file_path}: {str(e)}")
        
        return {
            "analyzed_files_count": len(results),
            "total_files_count": len(files),
            "files": results
        }

class DocumentationGenerator:
    """
    A dokument√°ci√≥ gener√°l√°s√°t v√©gz≈ë oszt√°ly.
    """
    
    def __init__(self, output_dir: str = None):
        """
        Inicializ√°l√°s, alap k√∂nyvt√°r be√°ll√≠t√°sa.
        """
        self.output_dir = output_dir or str(Path.cwd() / "outputs")
        self.file_write_tool = FileWriteTool()
        # El≈ëre l√©trehozzuk a k√∂nyvt√°rat
        os.makedirs(self.output_dir, exist_ok=True)
    
    async def generate_readme(self, project_data: Dict[str, Any], ai_results: Dict[str, Any]) -> str:
        """
        README.md gener√°l√°s a projekt adatok √©s az AI elemz√©sek alapj√°n.
        """
        logger.info("README.md gener√°l√°sa...")
        
        # Tartalom √∂ssze√°ll√≠t√°sa
        gpt_architecture = ai_results.get("architecture", {}).get("content", "")
        claude_best_practices = ai_results.get("best_practices", {}).get("content", "")
        
        project_name = Path(project_data.get("project_path", "")).name
        
        content = f"""# {project_name.upper()} Projekt Dokument√°ci√≥

## Projekt Le√≠r√°s
A Project-S egy eszk√∂z alap√∫, modul√°ris √°gensrendszer, amely t√°mogatja a munkafolyamat-vez√©relt AI feladatokat.

## F≈ëbb Komponensek
- Tools alrendszer k√ºl√∂nb√∂z≈ë feladatok v√©grehajt√°s√°ra
- LangGraph integr√°ci√≥ munkafolyamatok defini√°l√°s√°ra
- T√∂bb AI modell t√°mogat√°sa k√ºl√∂nb√∂z≈ë specializ√°lt feladatokra

## Projektstrukt√∫ra
- Python f√°jlok: {len(project_data.get("python_files", []))}
- Konfigur√°ci√≥s f√°jlok: {len(project_data.get("config_files", []))}
- Dokument√°ci√≥s f√°jlok: {len(project_data.get("doc_files", []))}

## Architekt√∫ra √ñsszefoglal√≥
{gpt_architecture}

## K√≥d min≈ës√©gi √©rt√©kel√©s
{claude_best_practices}

## Telep√≠t√©s √©s Haszn√°lat
```bash
# F√ºgg≈ës√©gek telep√≠t√©se
pip install -r requirements.txt

# Alap rendszer futtat√°sa
python main_minimal.py
```

Ez a dokument√°ci√≥ automatikusan gener√°lt a Project-S dokument√°ci√≥ gener√°l√≥ rendszer√©vel.
Gener√°l√°s ideje: {datetime.now().isoformat()}
"""
          # Biztos√≠tjuk, hogy a k√∂nyvt√°r l√©tezzen
        os.makedirs(os.path.dirname(self.output_dir), exist_ok=True)
        
        # Dokument√°ci√≥ ki√≠r√°sa
        readme_path = os.path.join(self.output_dir, "README.md")
        result = await self.file_write_tool.execute(
            path=readme_path,
            content=content
        )
        
        if result.get("success", False):
            logger.info(f"README.md sikeresen l√©trehozva: {readme_path}")
        else:
            logger.error(f"Hiba a README.md √≠r√°sa k√∂zben: {result.get('error')}")
        
        return readme_path
    
    async def generate_project_analysis(self, project_data: Dict[str, Any], 
                                       file_analysis: Dict[str, Any],
                                       ai_results: Dict[str, Any]) -> str:
        """
        R√©szletes PROJECT_ANALYSIS.md gener√°l√°s.
        """
        logger.info("PROJECT_ANALYSIS.md gener√°l√°sa...")
        
        # AI elemz√©sek kinyer√©se
        gpt_structure = ai_results.get("code_structure", {}).get("content", "")
        claude_security = ai_results.get("security", {}).get("content", "")
        
        # F√°jl statisztik√°k kisz√°m√≠t√°sa
        files = file_analysis.get("files", [])
        total_loc = sum(f.get("lines_of_code", 0) for f in files)
        classes_count = sum(len(f.get("classes", [])) for f in files)
        functions_count = sum(len(f.get("functions", [])) for f in files)
        
        # Legnagyobb f√°jlok azonos√≠t√°sa
        largest_files = sorted(files, key=lambda x: x.get("lines_of_code", 0), reverse=True)[:5]
        largest_files_content = "\n".join([f"- **{Path(f['path']).name}**: {f['lines_of_code']} sor" for f in largest_files])
        
        # Legt√∂bb oszt√°lyt tartalmaz√≥ f√°jlok
        most_classes = sorted(files, key=lambda x: len(x.get("classes", [])), reverse=True)[:5]
        most_classes_content = "\n".join([f"- **{Path(f['path']).name}**: {len(f['classes'])} oszt√°ly" for f in most_classes])
        
        # Projekt f√°jl strukt√∫ra
        main_dirs = set()
        for file in project_data.get("python_files", []):
            parts = Path(file).parts
            if len(parts) > 1:  # Ha van legal√°bb egy k√∂nyvt√°r
                main_dirs.add(parts[0])
        
        directories_content = "\n".join([f"- **{dir}/**" for dir in sorted(main_dirs)])
        
        content = f"""# PROJECT-S R√âSZLETES ANAL√çZIS

## Statisztik√°k
- **Python f√°jlok sz√°ma**: {len(project_data.get("python_files", []))}
- **√ñsszes k√≥dsor**: {total_loc}
- **Oszt√°lyok sz√°ma**: {classes_count}
- **F√ºggv√©nyek sz√°ma**: {functions_count}
- **Konfigur√°ci√≥s f√°jlok**: {len(project_data.get("config_files", []))}
- **Dokument√°ci√≥s f√°jlok**: {len(project_data.get("doc_files", []))}

## F≈ëbb k√∂nyvt√°rak
{directories_content}

## Legnagyobb f√°jlok (k√≥dsorok alapj√°n)
{largest_files_content}

## Legt√∂bb oszt√°lyt tartalmaz√≥ f√°jlok
{most_classes_content}

## K√≥d strukt√∫ra elemz√©s
{gpt_structure}

## Biztons√°gi √©rt√©kel√©s
{claude_security}

## Fejleszt√©si javaslatok
1. A dokument√°ci√≥ tov√°bbi b≈ëv√≠t√©se, k√ºl√∂n√∂sen az API-k r√©szleteinek le√≠r√°sa
2. Egys√©ges hiba√ºzenetek √©s napl√≥z√°si rendszer bevezet√©se
3. A tesztek lefedetts√©g√©nek n√∂vel√©se
4. Az eszk√∂z√∂k k√∂z√∂tti kapcsolatok jobb dokument√°l√°sa

Ez az elemz√©s a Project-S automatikus dokument√°ci√≥ gener√°l√≥ rendszer√©vel k√©sz√ºlt.
Gener√°l√°s ideje: {datetime.now().isoformat()}
"""
          # Dokument√°ci√≥ ki√≠r√°sa
        analysis_path = os.path.join(self.output_dir, "PROJECT_ANALYSIS.md")
        result = await self.file_write_tool.execute(
            path=analysis_path,
            content=content
        )
        
        if result.get("success", False):
            logger.info(f"PROJECT_ANALYSIS.md sikeresen l√©trehozva: {analysis_path}")
        else:
            logger.error(f"Hiba a PROJECT_ANALYSIS.md √≠r√°sa k√∂zben: {result.get('error')}")
        
        return analysis_path

class ProjectDocumentationGenerator:
    """
    F≈ë oszt√°ly a projekt dokument√°ci√≥ gener√°l√°s√°hoz, amely koordin√°lja a folyamatot.
    """
    
    def __init__(self, project_path: str):
        """
        Inicializ√°l√°s a projekt √∫tvonal√°val.
        """
        self.project_path = project_path
        self.output_dir = os.path.join(project_path, "outputs")
        
        # Komponensek l√©trehoz√°sa
        self.analyzer = ProjectStructureAnalyzer()
        self.ai_integration = AIModelIntegration()
        self.doc_generator = DocumentationGenerator(self.output_dir)
    
    async def generate_documentation(self) -> Dict[str, Any]:
        """
        A dokument√°ci√≥ gener√°l√°s teljes folyamata.
        """
        try:
            logger.info(f"Dokument√°ci√≥ gener√°l√°s ind√≠t√°sa a k√∂vetkez≈ë projektre: {self.project_path}")
            
            # 1. Projekt strukt√∫ra elemz√©se
            logger.info("1. l√©p√©s: Projekt strukt√∫ra elemz√©se")
            project_data = await self.analyzer.get_project_structure(self.project_path)
            
            # 2. Python f√°jlok r√©szletes elemz√©se
            logger.info("2. l√©p√©s: Python f√°jlok r√©szletes elemz√©se")
            file_analysis = await self.analyzer.analyze_python_files(project_data["python_files"])
            
            # 3. AI elemz√©sek v√©grehajt√°sa
            logger.info("3. l√©p√©s: AI elemz√©sek v√©grehajt√°sa")
            ai_results = {}
            
            # GPT-4 haszn√°lata architekt√∫ra elemz√©shez
            logger.info("GPT-4 haszn√°lata architekt√∫ra elemz√©shez")
            ai_results["architecture"] = await self.ai_integration.analyze_with_model(
                model="gpt-4", 
                prompt="Elemezd a projekt architekt√∫r√°j√°t √©s azonos√≠tsd a f≈ë design pattern-eket.",
                context={"project_data": project_data, "file_analysis": file_analysis}
            )
            
            # GPT-4 haszn√°lata k√≥d strukt√∫ra elemz√©shez
            logger.info("GPT-4 haszn√°lata k√≥d strukt√∫ra elemz√©shez")
            ai_results["code_structure"] = await self.ai_integration.analyze_with_model(
                model="gpt-4", 
                prompt="Elemezd a projekt k√≥d strukt√∫r√°j√°t √©s f≈ë komponenseit.",
                context={"project_data": project_data, "file_analysis": file_analysis}
            )
            
            # Claude haszn√°lata best practices elemz√©shez
            logger.info("Claude haszn√°lata best practices elemz√©shez")
            ai_results["best_practices"] = await self.ai_integration.analyze_with_model(
                model="claude-sonnet", 
                prompt="√ârt√©keld a k√≥d min≈ës√©g√©t √©s aj√°nlj best practices technik√°kat.",
                context={"project_data": project_data, "file_analysis": file_analysis}
            )
            
            # Claude haszn√°lata biztons√°gi elemz√©shez
            logger.info("Claude haszn√°lata biztons√°gi elemz√©shez")
            ai_results["security"] = await self.ai_integration.analyze_with_model(
                model="claude-sonnet", 
                prompt="√ârt√©keld a projekt biztons√°gi aspektusait, k√ºl√∂n√∂sen a k√≥d futtat√°s √©s rendszerparancs v√©grehajt√°s szempontj√°b√≥l.",
                context={"project_data": project_data, "file_analysis": file_analysis}
            )
            
            # 4. Dokument√°ci√≥ gener√°l√°sa
            logger.info("4. l√©p√©s: Dokument√°ci√≥ gener√°l√°sa")
            readme_path = await self.doc_generator.generate_readme(project_data, ai_results)
            analysis_path = await self.doc_generator.generate_project_analysis(project_data, file_analysis, ai_results)
            
            return {
                "success": True,
                "readme_path": readme_path,
                "analysis_path": analysis_path,
                "project_data": project_data,
                "ai_results": ai_results
            }
            
        except Exception as e:
            logger.error(f"Hiba t√∂rt√©nt a dokument√°ci√≥ gener√°l√°sa k√∂zben: {str(e)}")
            traceback.print_exc()
            return {
                "success": False,
                "error": str(e)
            }

async def update_status(status_path: str, new_status: Dict[str, Any]) -> bool:
    """
    A PROJECT_STATUS.md f√°jl friss√≠t√©se az √∫j st√°tusszal.
    """
    try:
        # Olvas√≥ √©s √≠r√≥ eszk√∂z√∂k l√©trehoz√°sa
        file_read_tool = FileReadTool()
        file_write_tool = FileWriteTool()
        
        # Jelenlegi tartalom olvas√°sa
        result = await file_read_tool.execute(path=status_path)
        
        if not result.get("success", False):
            logger.error(f"Nem siker√ºlt olvasni a st√°tusz f√°jlt: {status_path}")
            return False
        
        content = result["content"]
        
        # Friss√≠tj√ºk a d√°tumot
        content = re.sub(
            r'- \*\*Utols√≥ friss√≠t√©s\*\*: .*',
            f'- **Utols√≥ friss√≠t√©s**: {datetime.now().strftime("%Y-%m-%d %H:%M")}',
            content
        )
        
        # Friss√≠tj√ºk az aktu√°lis feladatot
        current_task_section = "## üîÑ JELENLEGI MUNKA"
        task_updated = False
        
        lines = content.split('\n')
        for i in range(len(lines)):
            if lines[i].strip() == current_task_section:
                if i + 1 < len(lines):
                    lines[i + 1] = f"**Aktu√°lis feladat**: {new_status['current_task']}"
                if i + 2 < len(lines):
                    lines[i + 2] = f"**Utols√≥ m√≥dos√≠t√°s**: {new_status['last_modification']}"
                if i + 3 < len(lines):
                    lines[i + 3] = f"**K√∂vetkez≈ë l√©p√©s**: {new_status['next_step']}"
                task_updated = True
                break
        
        if not task_updated:
            logger.warning("Nem tal√°lhat√≥ a JELENLEGI MUNKA szekci√≥ a PROJECT_STATUS.md f√°jlban")
        
        # Friss√≠tj√ºk a f√°jl strukt√∫r√°t az √∫j f√°jlokkal
        if "new_files" in new_status:
            file_structure_section = "## üìÅ F√ÅJLSTRUKT√öRA"
            structure_updated = False
            
            for i in range(len(lines)):
                if lines[i].strip() == file_structure_section:
                    for j in range(i+1, len(lines)):
                        if lines[j].strip() == "```":
                            # Keress√ºk meg a befejez≈ë ```-t
                            for k in range(j+1, len(lines)):
                                if lines[k].strip() == "```":
                                    # √öj f√°jlok hozz√°ad√°sa a strukt√∫r√°hoz
                                    for file, status in new_status["new_files"].items():
                                        new_line = f"‚îú‚îÄ‚îÄ {file} {status}"
                                        lines.insert(k, new_line)
                                    structure_updated = True
                                    break
                            break
                    break
            
            if not structure_updated:
                logger.warning("Nem tal√°lhat√≥ a F√ÅJLSTRUKT√öRA szekci√≥ a PROJECT_STATUS.md f√°jlban")
        
        # √ñssze√°ll√≠tjuk az √∫j tartalmat √©s √≠rjuk a f√°jlba
        new_content = '\n'.join(lines)
        
        # Mentj√ºk a friss√≠tett st√°tuszt
        write_result = await file_write_tool.execute(
            path=status_path,
            content=new_content
        )
        
        if write_result.get("success", False):
            logger.info(f"PROJECT_STATUS.md sikeresen friss√≠tve")
            return True
        else:
            logger.error(f"Hiba a PROJECT_STATUS.md friss√≠t√©se k√∂zben: {write_result.get('error')}")
            return False
            
    except Exception as e:
        logger.error(f"Hiba a st√°tusz friss√≠t√©sekor: {str(e)}")
        traceback.print_exc()
        return False

async def main():
    """
    F≈ë bel√©p√©si pont a dokument√°ci√≥ gener√°l√≥ futtat√°s√°hoz.
    """
    logger.info("=== Project-S Automatikus Dokument√°ci√≥ Gener√°l√≥ ===")
    
    # Projekt k√∂nyvt√°r be√°ll√≠t√°sa
    project_path = str(Path(__file__).parent)
    
    try:
        # Eszk√∂z√∂k regisztr√°l√°sa
        await register_all_tools()
        logger.info("‚úÖ Eszk√∂z√∂k sikeresen regisztr√°lva")
        
        # Dokument√°ci√≥ gener√°tor inicializ√°l√°sa
        doc_generator = ProjectDocumentationGenerator(project_path)
        
        # Friss√≠tj√ºk a PROJECT_STATUS.md-t az indul√°s jelz√©s√©re
        await update_status(
            os.path.join(project_path, "PROJECT_STATUS.md"),
            {
                "current_task": "Automatikus projekt dokument√°ci√≥ gener√°l√°s",
                "last_modification": "Dokument√°ci√≥ gener√°l√≥ rendszer inicializ√°l√°sa",
                "next_step": "Dokument√°ci√≥ gener√°l√°sa √©s ment√©se",
                "new_files": {
                    "auto_project_doc_generator.py": "‚úÖ [√öj]"
                }
            }
        )
        
        # Dokument√°ci√≥ gener√°l√°sa
        result = await doc_generator.generate_documentation()
        
        if result.get("success", False):
            logger.info("üéâ Dokument√°ci√≥ gener√°l√°s sikeres!")
            logger.info(f"üìÑ README.md: {result.get('readme_path')}")
            logger.info(f"üìÑ PROJECT_ANALYSIS.md: {result.get('analysis_path')}")
            
            # Friss√≠tj√ºk a PROJECT_STATUS.md-t a befejez√©s jelz√©s√©re
            await update_status(
                os.path.join(project_path, "PROJECT_STATUS.md"),
                {
                    "current_task": "Automatikus projekt dokument√°ci√≥ gener√°l√°s",
                    "last_modification": "Dokument√°ci√≥ gener√°l√°s befejezve, README.md √©s PROJECT_ANALYSIS.md elk√©sz√ºlt",
                    "next_step": "A gener√°lt dokument√°ci√≥ ellen≈ërz√©se √©s finomhangol√°sa",
                    "new_files": {
                        "outputs/README.md": "üìù [Gener√°lt]",
                        "outputs/PROJECT_ANALYSIS.md": "üìù [Gener√°lt]"
                    }
                }
            )
        else:
            logger.error(f"üí• Dokument√°ci√≥ gener√°l√°s sikertelen: {result.get('error')}")
            
            # Friss√≠tj√ºk a PROJECT_STATUS.md-t a hiba jelz√©s√©re
            await update_status(
                os.path.join(project_path, "PROJECT_STATUS.md"),
                {
                    "current_task": "Automatikus projekt dokument√°ci√≥ gener√°l√°s",
                    "last_modification": f"Dokument√°ci√≥ gener√°l√°s sikertelen: {result.get('error', 'Ismeretlen hiba')}",
                    "next_step": "A hiba jav√≠t√°sa √©s √∫jrapr√≥b√°lkoz√°s"
                }
            )
        
        return result
        
    except Exception as e:
        logger.error(f"Hiba a dokument√°ci√≥ gener√°l√≥ futtat√°sa k√∂zben: {str(e)}")
        traceback.print_exc()
        
        # Friss√≠tj√ºk a PROJECT_STATUS.md-t a hiba jelz√©s√©re
        await update_status(
            os.path.join(project_path, "PROJECT_STATUS.md"),
            {
                "current_task": "Automatikus projekt dokument√°ci√≥ gener√°l√°s",
                "last_modification": f"Hibaelh√°r√≠t√°s: {str(e)}",
                "next_step": "A hiba jav√≠t√°sa √©s √∫jrapr√≥b√°lkoz√°s"
            }
        )
        
        return {
            "success": False,
            "error": str(e)
        }

if __name__ == "__main__":
    result = asyncio.run(main())
    
    print("\n=== Automatikus Dokument√°ci√≥ Gener√°l√≥ Eredm√©ny ===")
    if result.get("success", False):
        print("‚úÖ A dokument√°ci√≥ gener√°l√°s sikeresen befejezve!")
        print(f"üìä L√©trehozott f√°jlok:")
        print(f"  - {result.get('readme_path')}")
        print(f"  - {result.get('analysis_path')}")
    else:
        print(f"‚ùå Hiba: {result.get('error', 'Ismeretlen hiba')}")
