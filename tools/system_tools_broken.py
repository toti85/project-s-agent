"""
Project-S System Tools
------------------
Ez a modul a rendszerparancsokhoz √©s rendszerfunkci√≥khoz kapcsol√≥d√≥ eszk√∂z√∂ket tartalmazza:
- Biztons√°gos rendszerparancs v√©grehajt√°s
- Rendszer inform√°ci√≥k lek√©r√©se
"""

import os
import asyncio
import logging
import subprocess
import shlex
import platform
import psutil
import tempfile
import json
import re
import pathlib
from typing import Dict, Any, List, Optional, Union, Set
from pathlib import Path

from tools.tool_interface import BaseTool
from tools.tool_registry import tool_registry

logger = logging.getLogger(__name__)

class CommandValidator:
    """
    Rendszerparancs valid√°tor √©s korl√°toz√≥ seg√©doszt√°ly.
    """
      # Tiltott parancsok √©s parancsr√©szek
    FORBIDDEN_COMMANDS = {
        "rm", "format", "mkfs", "fdisk", "wget", "curl", 
        "chmod", "chown", "sudo", "su", "passwd", "dd", 
        "rundll32", "regedit", "reg", "shutdown", 
        "restart", "halt", "rmdir", "rd", "deltree", "taskkill"
    }
    
    # Vesz√©lyes param√©terek √©s kapcsol√≥k
    DANGEROUS_PARAMS = {
        "-rf", "/s", "/q", "/f", "--force", "--recursive", 
        "--delete", "--purge", "--no-preserve-root", "/c", "/k"
    }    # Enged√©lyezett parancsok feh√©rlist√°ja
    ALLOWED_COMMANDS = {
        "ls", "dir", "cd", "pwd", "echo", "cat", "type",
        "find", "mkdir", "md", "ping", "ipconfig", "ifconfig",
        "systeminfo", "ver", "uname", "ps", "tasklist", 
        "free", "df", "du", "date", "time", "whoami",
        "hostname", "python", "pip",
        # üöÄ ENHANCED: Added Windows package managers and development tools
        "winget", "choco", "chocolatey", "scoop",
        "powershell", "pwsh", "cmd", "wmic", "sfc", "dism",
        "get-windowsupdate", "install-windowsupdate", "update-module",
        "git", "npm", "node", "dotnet", "java", "mvn", "gradle",
        # üîß ADDED: Common Unix/Linux commands that need translation
        "grep", "findstr", "apt", "yum", "dnf", "pacman",
        "which", "where", "head", "tail", "more", "less",
        "cp", "copy", "mv", "move", "touch", "chmod", "attrib",
        # üéØ HYBRID WORKFLOW: AI-generated commands and system optimization
        "del", "cleanmgr", "auto_detect", "request_parser", "content_analyzer",
        "web_scraper", "request_analyzer", "to_be_determined", "cleanup",
        "optimize", "analyze", "verify", "check", "scan", "process"
    }
    
    @staticmethod
    def translate_command(command: str) -> str:
        """
        üîÑ CRITICAL FIX: Platform-aware command translation (Linux ‚Üí Windows)
        
        Ford√≠tja a parancsot a megfelel≈ë platformra.
        
        Args:
            command: Az eredeti parancs
            
        Returns:
            str: A platformra optimaliz√°lt parancs
        """
        # Platform detection
        is_windows = os.name == "nt" or platform.system().lower() == "windows"
        
        # Command translation mapping
        if is_windows:
            # Unix to Windows command translations
            translations = {
                "ls -R": "dir /s",
                "ls -la": "dir /a",
                "ls -l": "dir",
                "ls": "dir",
                "cat": "type",
                "pwd": "cd",
                "rm": "del",
                "cp": "copy",
                "mv": "move",
                "mkdir": "mkdir",
                "rmdir": "rmdir",
                "grep": "findstr",                "ps aux": "tasklist",
                "ps": "tasklist",
                "kill": "taskkill",
                "which": "where",
                "find": "dir /s /b",
                "df": "wmic logicaldisk get caption,size,freespace",
                "free": "wmic OS get TotalVisibleMemorySize,FreePhysicalMemory",
                "uname -a": "systeminfo",
                "uname": "ver",
                # Safe system update commands that don't hang
                "sudo apt update": "winget list --upgrade-available",
                "sudo apt upgrade": "winget list --upgrade-available",
                "sudo apt update && sudo apt upgrade": "winget list --upgrade-available",
                "apt update": "winget list --upgrade-available", 
                "apt upgrade": "winget list --upgrade-available",
                "yum update": "winget list --upgrade-available",
                "dnf update": "winget list --upgrade-available",
                "pacman -Syu": "winget list --upgrade-available"
            }
            
            # Apply translations
            for unix_cmd, windows_cmd in translations.items():
                if command.startswith(unix_cmd):
                    # Replace the command while preserving additional arguments
                    remaining_args = command[len(unix_cmd):].strip()
                    if remaining_args:
                        return f"{windows_cmd} {remaining_args}"
                    else:
                        return windows_cmd
        else:
            # Windows to Unix command translations (if needed)
            translations = {
                "dir /s": "ls -R",
                "dir /a": "ls -la", 
                "dir": "ls -l",
                "type": "cat",
                "del": "rm",
                "copy": "cp",
                "move": "mv",
                "tasklist": "ps",
                "taskkill": "kill",
                "where": "which"
            }
            
            # Apply translations
            for windows_cmd, unix_cmd in translations.items():
                if command.startswith(windows_cmd):
                    remaining_args = command[len(windows_cmd):].strip()
                    if remaining_args:
                        return f"{unix_cmd} {remaining_args}"
                    else:
                        return unix_cmd
        
        return command
    
    @staticmethod
    def validate_command(command: str) -> Dict[str, Any]:
        """
        Ellen≈ërzi a parancsot biztons√°gi szempontb√≥l.
        
        Args:
            command: Az ellen≈ërizend≈ë parancs
            
        Returns:
            Dict[str, Any]: Az ellen≈ërz√©s eredm√©nye
        """
        # Parancs feloszt√°sa r√©szekre
        if os.name == "nt":  # Windows
            try:
                # Windows-specifikus id√©z≈ëjel kezel√©s
                command_parts = shlex.split(command, posix=False)
            except ValueError as e:
                return {
                    "valid": False,
                    "reason": f"√ârv√©nytelen parancs szintaxis: {str(e)}"
                }
        else:
            try:
                command_parts = shlex.split(command)
            except ValueError as e:
                return {
                    "valid": False,
                    "reason": f"√ârv√©nytelen parancs szintaxis: {str(e)}"
                }
        
        if not command_parts:
            return {
                "valid": False,
                "reason": "√úres parancs"
            }
        
        # Els≈ë sz√≥ a parancs neve
        command_name = command_parts[0].lower()
        base_command = os.path.basename(command_name)
        
        # Ellen≈ërizz√ºk, hogy a parancs szerepel-e a tilt√≥list√°n
        if base_command in CommandValidator.FORBIDDEN_COMMANDS:
            return {
                "valid": False,
                "reason": f"Tiltott parancs: {base_command}"
            }
            
        # Ha a parancs nem szerepel az enged√©lyezett list√°n
        if base_command not in CommandValidator.ALLOWED_COMMANDS:
            return {
                "valid": False,
                "reason": f"Nem enged√©lyezett parancs: {base_command}. Csak a k√∂vetkez≈ëk enged√©lyezettek: {', '.join(CommandValidator.ALLOWED_COMMANDS)}"
            }
            
        # Ellen≈ërizz√ºk a param√©tereket
        for param in command_parts[1:]:
            param_lower = param.lower()
            
            # Vesz√©lyes param√©terek ellen≈ërz√©se
            for dangerous in CommandValidator.DANGEROUS_PARAMS:
                if param_lower == dangerous or param_lower.startswith(dangerous + "="):
                    return {
                        "valid": False,
                        "reason": f"Vesz√©lyes param√©ter: {param}"
                    }
                    
            # Tiltott parancsok keres√©se a param√©terekben (pl. shell be√°gyaz√°s)
            for forbidden in CommandValidator.FORBIDDEN_COMMANDS:
                if forbidden in param_lower:
                    # Ellen≈ërizz√ºk, hogy val√≥ban parancs be√°gyaz√°sr√≥l van-e sz√≥
                    if ";" in param or "|" in param or "&" in param or "`" in param or "$(" in param:
                        return {
                            "valid": False,
                            "reason": f"A parancs be√°gyaz√°s nem enged√©lyezett: {param}"
                        }
                    if os.name == "nt" and ("%" in param and "%" in param[param.find("%") + 1:]):
                        return {
                            "valid": False,
                            "reason": f"A parancs be√°gyaz√°s nem enged√©lyezett: {param}"
                        }
                        
        # Parancs oper√°torok ellen≈ërz√©se
        if ";" in command or "|" in command or "&" in command or "&&" in command or "||" in command:
            return {
                "valid": False,
                "reason": "Parancs oper√°torok √©s l√°ncok nem enged√©lyezettek"
            }
            
        # √Åtir√°ny√≠t√°s oper√°torok ellen≈ërz√©se
        if ">" in command or "<" in command or ">>" in command:
            return {
                "valid": False,
                "reason": "√Åtir√°ny√≠t√≥ oper√°torok nem enged√©lyezettek"
            }
        
        return {
            "valid": True,
            "reason": "A parancs biztons√°gos",
            "command": command
        }


class SystemCommandTool(BaseTool):
    """
    Biztons√°gos rendszerparancs v√©grehajt√°s.
    
    Category: system
    Version: 1.0.0
    Requires permissions: Yes
    Safe: No
    """
    
    def __init__(self):
        """Inicializ√°lja az eszk√∂zt."""
        super().__init__()
        # Be√°ll√≠tjuk a munkamapp√°t
        self.work_dir = tool_registry.default_paths["temp"]
        
    async def execute(self, 
                     command: str,
                     timeout: int = 30,
                     workdir: Optional[str] = None) -> Dict[str, Any]:
        """
        V√©grehajt egy rendszerparancsot biztons√°gos m√≥don.
        
        Args:
            command: A v√©grehajtand√≥ parancs
            timeout: Id≈ët√∫ll√©p√©s m√°sodpercben
            workdir: Munkak√∂nyvt√°r el√©r√©si √∫tja
            
        Returns:
            Dict: A v√©grehajt√°s eredm√©nye
        """
        try:
            # Biztons√°gi ellen≈ërz√©s
            security_check = tool_registry.check_security("system_command", {"command": command})
            if not security_check["allowed"]:
                return {
                    "success": False,
                    "error": security_check["reason"],
                    "stdout": "",
                    "stderr": "",
                    "exit_code": -1
                }
                  # Parancs valid√°l√°sa
            validation = CommandValidator.validate_command(command)
            if not validation["valid"]:
                return {
                    "success": False,
                    "error": validation["reason"],
                    "stdout": "",
                    "stderr": "",
                    "exit_code": -1
                }
                
            # Platform-specifikus parancs ford√≠t√°s
            translated_command = CommandValidator.translate_command(command)
            logger.info(f"Command translation: '{command}' -> '{translated_command}'")
                
            # Munkak√∂nyvt√°r be√°ll√≠t√°sa
            if workdir is None:
                workdir = self.work_dir
            else:
                # Ellen≈ërizz√ºk, hogy a munkak√∂nyvt√°r megengedett-e
                workdir_path = Path(workdir).resolve()
                for restricted in tool_registry.security_config["restricted_paths"]:
                    if str(workdir_path).startswith(restricted):
                        return {
                            "success": False,
                            "error": f"A megadott munkak√∂nyvt√°r ({workdir}) korl√°tozott: {restricted}",
                            "stdout": "",
                            "stderr": "",
                            "exit_code": -1
                        }            # üöÄ ENHANCED: Optimized PowerShell execution with faster timeout
            # For PowerShell commands, use shorter timeout and optimized execution
            if translated_command.startswith('powershell') or translated_command.startswith('pwsh'):
                # Optimize PowerShell commands for faster execution
                if 'Remove-Item' in translated_command:
                    # Make temp cleanup faster and safer
                    translated_command = translated_command.replace(
                        'Remove-Item $env:TEMP\\* -Recurse -Force -ErrorAction SilentlyContinue',
                        'powershell -Command "Get-ChildItem $env:TEMP -Force | Where-Object {$_.LastWriteTime -lt (Get-Date).AddDays(-1)} | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue" -TimeoutSec 10'
                    )
                # Use shorter timeout for PowerShell commands
                ps_timeout = min(timeout, 15)  # Max 15 seconds for PowerShell
            else:
                ps_timeout = timeout
            
            # Parancs v√©grehajt√°sa aszinkron m√≥don
            process = await asyncio.create_subprocess_shell(
                translated_command,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                cwd=workdir,
                shell=True
            )
            
            try:                stdout_data, stderr_data = await asyncio.wait_for(
                    process.communicate(), 
                    timeout=ps_timeout
                )
                stdout = stdout_data.decode('utf-8', errors='replace')
                stderr = stderr_data.decode('utf-8', errors='replace')
                exit_code = process.returncode
                
            except asyncio.TimeoutError:
                # Id≈ët√∫ll√©p√©s eset√©n megszak√≠tjuk a folyamatot
                try:
                    process.terminate()
                    await asyncio.sleep(0.5)
                    if process.returncode is None:
                        process.kill()
                except Exception:
                    pass
                    
                return {
                    "success": False,
                    "error": f"‚è±Ô∏è PowerShell timeout: Command exceeded {ps_timeout}s limit (optimized for performance)",
                    "stdout": "",
                    "stderr": "",
                    "exit_code": -1,
                    "timeout": True,
                    "optimization_note": "PowerShell commands are limited to 15s for system performance"
                }
            
            # Eredm√©ny √∂ssze√°ll√≠t√°sa
            success = exit_code == 0
            
            return {
                "success": success,
                "stdout": stdout,
                "stderr": stderr,
                "exit_code": exit_code,
                "command": command,
                "translated_command": translated_command,
                "workdir": workdir
            }
                
        except Exception as e:
            logger.error(f"Hiba t√∂rt√©nt a rendszerparancs v√©grehajt√°sa k√∂zben: {str(e)}")
            return {
                "success": False,
                "error": f"Hiba a rendszerparancs v√©grehajt√°sa sor√°n: {str(e)}",
                "stdout": "",
                "stderr": "",
                "exit_code": -1
            }


class SystemInfoTool(BaseTool):
    """
    Rendszer inform√°ci√≥k lek√©rdez√©se.
    
    Category: system
    Version: 1.0.0
    Requires permissions: No
    Safe: Yes
    """
    
    async def execute(self, info_type: str = "all") -> Dict[str, Any]:
        """
        Inform√°ci√≥kat ad a rendszerr≈ël.
        
        Args:
            info_type: A lek√©rend≈ë inform√°ci√≥ t√≠pusa 
                      ('all', 'os', 'cpu', 'memory', 'disk', 'network')
            
        Returns:
            Dict: A lek√©rdez√©s eredm√©nye
        """
        try:
            result = {}
            
            # Inform√°ci√≥k az oper√°ci√≥s rendszerr≈ël
            if info_type in ["all", "os"]:
                os_info = {
                    "system": platform.system(),
                    "release": platform.release(),
                    "version": platform.version(),
                    "architecture": platform.machine(),
                    "processor": platform.processor(),
                    "hostname": platform.node(),
                    "python_version": platform.python_version()
                }
                result["os"] = os_info
                
            # CPU inform√°ci√≥
            if info_type in ["all", "cpu"]:
                cpu_info = {
                    "physical_cores": psutil.cpu_count(logical=False),
                    "total_cores": psutil.cpu_count(logical=True),
                    "cpu_percent": psutil.cpu_percent(interval=0.5),
                    "cpu_freq": {
                        "current": psutil.cpu_freq().current if psutil.cpu_freq() else None,
                        "min": psutil.cpu_freq().min if psutil.cpu_freq() else None,
                        "max": psutil.cpu_freq().max if psutil.cpu_freq() else None
                    }
                }
                result["cpu"] = cpu_info
                
            # Mem√≥ria inform√°ci√≥
            if info_type in ["all", "memory"]:
                mem = psutil.virtual_memory()
                memory_info = {
                    "total": mem.total,
                    "available": mem.available,
                    "used": mem.used,
                    "percent": mem.percent
                }
                result["memory"] = memory_info
                
                # Swap inform√°ci√≥
                swap = psutil.swap_memory()
                swap_info = {
                    "total": swap.total,
                    "used": swap.used,
                    "free": swap.free,
                    "percent": swap.percent
                }
                result["swap"] = swap_info
                
            # Lemez inform√°ci√≥
            if info_type in ["all", "disk"]:
                disk_info = []
                for partition in psutil.disk_partitions():
                    try:
                        usage = psutil.disk_usage(partition.mountpoint)
                        partition_info = {
                            "device": partition.device,
                            "mountpoint": partition.mountpoint,
                            "fstype": partition.fstype,
                            "total": usage.total,
                            "used": usage.used,
                            "free": usage.free,
                            "percent": usage.percent
                        }
                        disk_info.append(partition_info)
                    except (PermissionError, OSError):
                        # N√©h√°ny lemez nem el√©rhet≈ë (pl. CD-ROM)
                        pass
                        
                result["disk"] = disk_info
                
            # H√°l√≥zati inform√°ci√≥
            if info_type in ["all", "network"]:
                # H√°l√≥zati interf√©szek
                interfaces = psutil.net_if_addrs()
                net_interfaces = {}
                
                for interface_name, interface_addresses in interfaces.items():
                    addresses = []
                    for addr in interface_addresses:
                        address_info = {
                            "family": str(addr.family),
                            "address": addr.address,
                            "netmask": addr.netmask,
                            "broadcast": addr.broadcast
                        }
                        addresses.append(address_info)
                        
                    net_interfaces[interface_name] = addresses
                    
                # H√°l√≥zati forgalom
                net_io = psutil.net_io_counters()
                net_io_info = {
                    "bytes_sent": net_io.bytes_sent,
                    "bytes_recv": net_io.bytes_recv,
                    "packets_sent": net_io.packets_sent,
                    "packets_recv": net_io.packets_recv
                }
                
                result["network"] = {
                    "interfaces": net_interfaces,
                    "io": net_io_info
                }
                
            # Az eredm√©ny kieg√©sz√≠t√©se egy√©b adatokkal
            result["timestamp"] = psutil.boot_time()
            result["uptime"] = int(time.time() - psutil.boot_time())
            
            return {
                "success": True,
                "info_type": info_type,
                "result": result
            }
                
        except Exception as e:
            logger.error(f"Hiba t√∂rt√©nt a rendszer inform√°ci√≥k lek√©r√©se k√∂zben: {str(e)}")
            return {
                "success": False,
                "error": f"Hiba a rendszer inform√°ci√≥k lek√©r√©se sor√°n: {str(e)}"
            }


class EnvironmentVariableTool(BaseTool):
    """
    K√∂rnyezeti v√°ltoz√≥k kezel√©se.
    
    Category: system
    Version: 1.0.0
    Requires permissions: No
    Safe: Yes
    """
    
    # Biztons√°gos k√∂rnyezeti v√°ltoz√≥k, amelyek lek√©rdezhet≈ëk
    SAFE_ENV_VARS = {
        "PATH", "PYTHONPATH", "TEMP", "TMP", "HOME", "USER", 
        "USERPROFILE", "LANG", "LANGUAGE", "LC_ALL", "SHELL",
        "TERM", "HOSTNAME"
    }
    
    async def execute(self, 
                     action: str = "get",
                     name: Optional[str] = None) -> Dict[str, Any]:
        """
        K√∂rnyezeti v√°ltoz√≥k kezel√©se.
        
        Args:
            action: A v√©grehajtand√≥ m≈±velet ('get' vagy 'list')
            name: A k√∂rnyezeti v√°ltoz√≥ neve (csak 'get' m≈±velethez)
            
        Returns:
            Dict: A m≈±velet eredm√©nye
        """
        try:
            # Lista m≈±velet: √∂sszes biztons√°gos env v√°ltoz√≥ list√°z√°sa
            if action == "list":
                # Csak a biztons√°gos v√°ltoz√≥kat adjuk vissza
                safe_env = {}
                for key, value in os.environ.items():
                    if key.upper() in self.SAFE_ENV_VARS:
                        safe_env[key] = value
                        
                return {
                    "success": True,
                    "action": action,
                    "variables": safe_env
                }
                
            # Get m≈±velet: egy konkr√©t v√°ltoz√≥ lek√©r√©se
            elif action == "get":
                if name is None:
                    return {
                        "success": False,
                        "error": "A 'get' m≈±velethez meg kell adni a v√°ltoz√≥ nev√©t"
                    }
                    
                # Ellen≈ërizz√ºk, hogy biztons√°gos-e a v√°ltoz√≥
                if name.upper() not in self.SAFE_ENV_VARS:
                    return {
                        "success": False,
                        "error": f"A(z) '{name}' k√∂rnyezeti v√°ltoz√≥ nem k√©rdezhet≈ë le biztons√°gi okokb√≥l"
                    }
                    
                # V√°ltoz√≥ lek√©r√©se
                value = os.environ.get(name)
                
                if value is None:
                    return {
                        "success": False,
                        "error": f"A(z) '{name}' k√∂rnyezeti v√°ltoz√≥ nem l√©tezik"
                    }
                    
                return {
                    "success": True,
                    "action": action,
                    "name": name,
                    "value": value
                }
                
            else:
                return {
                    "success": False,
                    "error": f"√ârv√©nytelen m≈±velet: {action}. T√°mogatott m≈±veletek: 'get', 'list'"
                }
                
        except Exception as e:
            logger.error(f"Hiba t√∂rt√©nt a k√∂rnyezeti v√°ltoz√≥k kezel√©se k√∂zben: {str(e)}")
            return {
                "success": False,
                "error": f"Hiba a k√∂rnyezeti v√°ltoz√≥k kezel√©se sor√°n: {str(e)}"
            }