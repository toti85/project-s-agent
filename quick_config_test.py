#!/usr/bin/env python3
import json
from pathlib import Path

print("=== GYORS BIZTONS√ÅGI KONFIGUR√ÅCI√ì TESZT ===")

# 1. Ellen≈ërizz√ºk a config f√°jl tartalm√°t
config_path = Path("config/tool_security.json")
print(f"Config f√°jl el√©r√©si √∫t: {config_path.absolute()}")
print(f"Config f√°jl l√©tezik: {config_path.exists()}")

if config_path.exists():
    with open(config_path, 'r', encoding='utf-8') as f:
        config = json.load(f)
    print("Config f√°jl tartalma:")
    for key, value in config.items():
        print(f"   {key}: {value}")
else:
    print("‚ùå Config f√°jl nem tal√°lhat√≥!")

# 2. Most pr√≥b√°ljuk meg bet√∂lteni a ToolRegistry-t
try:
    from tools.tool_registry import ToolRegistry
    registry = ToolRegistry()
    
    print("\nToolRegistry biztons√°gi be√°ll√≠t√°sok:")
    for key, value in registry.security_config.items():
        print(f"   {key}: {value}")
    
    # Ellen≈ërizz√ºk az allow_system_commands √©rt√©k√©t
    allow_system = registry.security_config.get("allow_system_commands", False)
    print(f"\nüîç Allow system commands: {allow_system}")
    
    if allow_system:
        print("‚úÖ System commands ENGED√âLYEZVE")
    else:
        print("‚ùå System commands LETILTVA")
        
except Exception as e:
    print(f"‚ùå Hiba a ToolRegistry bet√∂lt√©sekor: {e}")
    import traceback
    traceback.print_exc()

print("\n=== TESZT V√âGE ===")
