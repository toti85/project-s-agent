"""
Project-S Minim√°lis Rendszer Ellen≈ërz√©s
--------------------------------------
Ez a szkript ellen≈ërzi a minim√°lis rendszer √∂sszetev≈ëit √©s f√ºgg≈ës√©geit.
Futtat√°s el≈ëtt ellen≈ërizhetj√ºk, hogy minden rendben van-e.
"""

import sys
import os
import importlib
import subprocess
from pathlib import Path

def print_header(title):
    """Form√°zott fejl√©c ki√≠r√°sa"""
    print("\n" + "=" * 60)
    print(f" {title}")
    print("=" * 60)

def check_python_version():
    """Python verzi√≥ ellen≈ërz√©se"""
    print_header("Python Verzi√≥ Ellen≈ërz√©s")
    ver = sys.version_info
    print(f"Python verzi√≥: {ver.major}.{ver.minor}.{ver.micro}")
    
    if ver.major < 3 or (ver.major == 3 and ver.minor < 8):
        print("‚ùå HIBA: Python 3.8 vagy √∫jabb verzi√≥ sz√ºks√©ges!")
        return False
    else:
        print("‚úÖ Python verzi√≥ megfelel≈ë")
        return True

def check_dependencies():
    """F√ºgg≈ës√©gek ellen≈ërz√©se"""
    print_header("F√ºgg≈ës√©gek Ellen≈ërz√©se")
    
    required_packages = {
        "asyncio": "Aszinkron m≈±veletek",
        "httpx": "HTTP k√©r√©sek k√ºld√©se",
        "yaml": "YAML f√°jlok kezel√©se",
        "langgraph": "LangGraph integr√°ci√≥",
    }
    
    all_ok = True
    
    for package, description in required_packages.items():
        try:
            importlib.import_module(package)
            print(f"‚úÖ {package}: Telep√≠tve ({description})")
        except ImportError:
            print(f"‚ùå {package}: Hi√°nyzik! ({description})")
            all_ok = False
    
    if not all_ok:
        print("\nHi√°nyz√≥ csomagok telep√≠t√©se:")
        print("pip install -r requirements_minimal.txt")
    
    return all_ok

def check_api_keys():
    """API kulcsok ellen≈ërz√©se"""
    print_header("API Kulcsok Ellen≈ërz√©se")
    
    openai_key = os.environ.get("OPENAI_API_KEY", "")
    openrouter_key = os.environ.get("OPENROUTER_API_KEY", "")
    
    if openai_key:
        print(f"‚úÖ OpenAI API kulcs: Be√°ll√≠tva ({openai_key[:5]}...{openai_key[-4:] if len(openai_key) > 8 else ''})")
    else:
        print("‚ùì OpenAI API kulcs: Nincs be√°ll√≠tva")
    
    if openrouter_key:
        print(f"‚úÖ OpenRouter API kulcs: Be√°ll√≠tva ({openrouter_key[:5]}...{openrouter_key[-4:] if len(openrouter_key) > 8 else ''})")
    else:
        print("‚ùì OpenRouter API kulcs: Nincs be√°ll√≠tva")
    
    if not openai_key and not openrouter_key:
        print("\n‚ö†Ô∏è Figyelem: Egyik API kulcs sincs be√°ll√≠tva!")
        print("Az AI integr√°ci√≥ nem fog m≈±k√∂dni. √Åll√≠ts be legal√°bb egy API kulcsot:")
        print("  - Windows: set OPENAI_API_KEY=your_key_here")
        print("  - Linux/Mac: export OPENAI_API_KEY=your_key_here")
        print("  - Vagy haszn√°ld a start_minimal.bat/sh f√°jlokat √©s add meg ott a kulcsokat")
        return False
    
    return True

def check_file_structure():
    """F√°jlszerkezet ellen≈ërz√©se"""
    print_header("F√°jlszerkezet Ellen≈ërz√©se")
    
    required_files = [
        ("main_minimal.py", "Alapvet≈ë minim√°lis verzi√≥"),
        ("main_minimal_langgraph.py", "LangGraph integr√°ci√≥s verzi√≥"),
        ("main_minimal_full.py", "Teljes minim√°lis verzi√≥"),
        ("requirements_minimal.txt", "Minim√°lis f√ºgg≈ës√©gek"),
        ("integrations/simple_ai.py", "Egyszer≈± AI integr√°ci√≥"),
        ("integrations/langgraph_minimal.py", "Minim√°lis LangGraph integr√°ci√≥"),
        ("core/event_bus.py", "Esem√©nykezel≈ë rendszer"),
        ("core/error_handler.py", "Hibakezel≈ë rendszer"),
    ]
    
    all_ok = True
    
    for file_path, description in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}: Megtal√°lva ({description})")
        else:
            print(f"‚ùå {file_path}: Hi√°nyzik! ({description})")
            all_ok = False
    
    if not os.path.exists("logs"):
        os.makedirs("logs", exist_ok=True)
        print("üìÅ L√©trehozva: logs mappa")
    
    return all_ok

def run_simple_test():
    """Egyszer≈± teszt v√©grehajt√°sa"""
    print_header("Egyszer≈± Teszt V√©grehajt√°sa")
    
    try:
        # Import√°ljuk az esem√©nykezel≈ët
        sys.path.append(os.getcwd())
        from core.event_bus import event_bus
        
        # Regisztr√°ljuk a tesztkezel≈ët
        async def test_handler(event_data):
            print(f"‚úÖ Esem√©ny sikeresen fogadva: {event_data}")
        
        event_bus.subscribe("test.event", test_handler)
        
        print("‚úÖ Esem√©nykezel≈ë sikeresen import√°lva √©s tesztkezel≈ë regisztr√°lva")
        print("‚úÖ Egyszer≈± teszt sikeres - a rendszer indul√°sra k√©sz")
        return True
        
    except Exception as e:
        print(f"‚ùå Hiba a teszt sor√°n: {str(e)}")
        return False

def main():
    """F≈ë f√ºggv√©ny"""
    print("\n" + "=" * 60)
    print(" PROJECT-S MINIM√ÅLIS RENDSZER ELLEN≈êRZ√âS")
    print("=" * 60 + "\n")
    
    checks = {
        "Python verzi√≥": check_python_version(),
        "F√ºgg≈ës√©gek": check_dependencies(),
        "API kulcsok": check_api_keys(),
        "F√°jlszerkezet": check_file_structure(),
        "Egyszer≈± teszt": run_simple_test(),
    }
    
    print_header("Ellen≈ërz√©s √ñsszes√≠t√©s")
    
    all_ok = True
    for check_name, result in checks.items():
        status = "‚úÖ OK" if result else "‚ùå HIBA"
        print(f"{check_name}: {status}")
        if not result:
            all_ok = False
    
    print("\n" + "=" * 60)
    if all_ok:
        print("‚úÖ MINDEN ELLEN≈êRZ√âS SIKERES - A rendszer indul√°sra k√©sz!")
        print("\nInd√≠t√°s:")
        print("  - Windows: start_minimal.bat")
        print("  - Linux/Mac: ./start_minimal.sh")
    else:
        print("‚ö†Ô∏è FIGYELEM - N√©h√°ny ellen≈ërz√©s hib√°t jelzett!")
        print("Jav√≠tsd a fenti hib√°kat a rendszer ind√≠t√°sa el≈ëtt.")
    print("=" * 60 + "\n")

if __name__ == "__main__":
    main()
