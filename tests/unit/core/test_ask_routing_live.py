#!/usr/bin/env python3
"""
Gyors teszt az ASK command model routing jav√≠t√°s√°hoz
Ez a teszt ellen≈ërzi, hogy az ASK commandok val√≥ban ModelManager-en kereszt√ºl mennek-e
"""

import asyncio
import json
import sys
import os

# Projekt √∫tvonal hozz√°ad√°sa
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

async def test_ask_command_integration():
    """ASK command integr√°ci√≥ teszt"""
    
    print("üîç ASK COMMAND MODEL ROUTING TESZT")
    print("=" * 50)
    
    try:
        # 1. Command Router tesztel√©se
        print("1Ô∏è‚É£ Command Router import√°l√°sa...")
        from core.command_router import CommandRouter
        
        router = CommandRouter()
        print(f"‚úÖ Router l√©trehozva: {type(router)}")
        
        # 2. ASK handler regisztr√°ci√≥j√°nak ellen≈ërz√©se
        print("\n2Ô∏è‚É£ ASK handler ellen≈ërz√©se...")
        if "ASK" in router.handlers:
            print("‚úÖ ASK handler regisztr√°lva")
            handler = router.handlers["ASK"]
            print(f"   Handler: {handler}")
        else:
            print("‚ùå ASK handler NINCS regisztr√°lva")
            return False
        
        # 3. AI Handler inspekt√°l√°sa
        print("\n3Ô∏è‚É£ AI Handler √°llapot√°nak ellen≈ërz√©se...")
        ai_handler = router.ai_handler
        print(f"   AI Handler t√≠pus: {type(ai_handler)}")
        
        # ModelManager ellen≈ërz√©se
        if hasattr(ai_handler, 'model_manager'):
            print("‚úÖ ModelManager el√©rhet≈ë az AI Handler-ben")
            print(f"   ModelManager t√≠pus: {type(ai_handler.model_manager)}")
        else:
            print("‚ö†Ô∏è  ModelManager NINCS az AI Handler-ben")
            
        # Fallback QwenOllamaClient ellen≈ërz√©se
        if hasattr(ai_handler, 'qwen'):
            print("‚úÖ QwenOllamaClient fallback el√©rhet≈ë")
        else:
            print("‚ö†Ô∏è  QwenOllamaClient fallback NINCS")
        
        # 4. Egyszer≈± ASK command teszt
        print("\n4Ô∏è‚É£ ASK command teszt...")
        
        test_command = {
            "type": "ASK",
            "query": "Mi a mai d√°tum? (Ez egy teszt k√©rd√©s)"
        }
        
        print(f"K√ºld√∂tt parancs: {json.dumps(test_command, ensure_ascii=False)}")
        
        # Command v√©grehajt√°sa
        result = await router.route_command(test_command)
        
        print(f"\nEredm√©ny: {json.dumps(result, ensure_ascii=False, indent=2)}")
        
        # 5. Eredm√©ny ki√©rt√©kel√©se
        print("\n5Ô∏è‚É£ Eredm√©ny ki√©rt√©kel√©se...")
        
        if isinstance(result, dict):
            if "error" in result:
                print(f"‚ùå Hiba t√∂rt√©nt: {result['error']}")
                return False
            elif "response" in result or "result" in result:
                print("‚úÖ Sikeres v√°lasz √©rkezett")
                
                response_text = result.get("response", result.get("result", ""))
                if response_text:
                    print(f"   V√°lasz: {response_text[:100]}...")
                    return True
                else:
                    print("‚ö†Ô∏è  √úres v√°lasz")
                    return True
            else:
                print("‚ö†Ô∏è  V√°ratlan v√°lasz form√°tum")
                return True
        else:
            print("‚ùå √ârv√©nytelen v√°lasz t√≠pus")
            return False
            
    except Exception as e:
        print(f"‚ùå Teszt hiba: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

async def test_model_routing_verification():
    """Model routing ellen≈ërz√©se"""
    
    print("\nüîß MODEL ROUTING VERIFIK√ÅCI√ì")
    print("=" * 50)
    
    try:
        # ModelManager k√∂zvetlen tesztel√©se
        print("1Ô∏è‚É£ ModelManager k√∂zvetlen teszt...")
        
        from integrations.model_manager import ModelManager
        
        model_manager = ModelManager()
        print("‚úÖ ModelManager sikeresen inicializ√°lva")
        
        # Task type routing teszt
        print("\n2Ô∏è‚É£ Task type routing teszt...")
        
        # Kis teszt prompt
        test_response = await model_manager.generate_response(
            prompt="V√°laszolj egy sz√≥val: 'm≈±k√∂dik'",
            task_type="ask"
        )
        
        print(f"ModelManager v√°lasz: {test_response}")
        
        if isinstance(test_response, dict) and test_response.get("status") == "success":
            print("‚úÖ ModelManager m≈±k√∂dik az 'ask' task type-pal")
            return True
        else:
            print("‚ö†Ô∏è  ModelManager v√°lasz v√°ratlan form√°tum√∫")
            return True
            
    except Exception as e:
        print(f"‚ùå ModelManager teszt hiba: {str(e)}")
        return False

async def main():
    """F≈ë teszt futtat√°s"""
    
    print("üöÄ PROJECT-S ASK COMMAND ROUTING TESZT")
    print("üéØ C√©l: Ellen≈ërizni, hogy ASK commandok ModelManager-en kereszt√ºl mennek")
    print("üìÖ D√°tum: 2025. m√°jus 26.")
    print()
    
    success_count = 0
    total_tests = 2
    
    # 1. teszt: ASK command integr√°ci√≥
    if await test_ask_command_integration():
        success_count += 1
        
    # 2. teszt: ModelManager routing
    if await test_model_routing_verification():
        success_count += 1
    
    # √ñsszegz√©s
    print("\n" + "=" * 60)
    print("üìä TESZT √ñSSZEGZ√âS")
    print("=" * 60)
    print(f"Sikeres tesztek: {success_count}/{total_tests}")
    
    if success_count == total_tests:
        print("üéâ MINDEN TESZT SIKERES!")
        print("‚úÖ Az ASK command routing jav√≠t√°s m≈±k√∂dik")
        print("‚úÖ A rendszer k√©szen √°ll a haszn√°latra")
    elif success_count > 0:
        print("‚ö†Ô∏è  R√âSZBEN SIKERES")
        print("   N√©h√°ny komponens m≈±k√∂dik, de lehetnek probl√©m√°k")
    else:
        print("‚ùå TESZTEK SIKERTELENEK")
        print("   A jav√≠t√°s nem m≈±k√∂dik megfelel≈ëen")
        
    return success_count == total_tests

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Teszt megszak√≠tva")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Kritikus hiba: {str(e)}")
        sys.exit(1)
