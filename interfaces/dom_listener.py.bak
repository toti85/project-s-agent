"""
DOMListener for Project-S
Integrates robust DOM-based command detection and response sending for AI interfaces (ChatGPT, Claude, Gemini, Copilot).
Adapted from tested logic in dom_handler_test.py.
"""
import time
import logging
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys

logger = logging.getLogger("DOM_Listener")

class DOMListener:
    COMMAND_PREFIXES = ("CMD:", "CODE:", "INFO:", "FILE:", "TEST:", "COMMAND:", "S_CMD:", "EXECUTE:", "TASK:")

    def __init__(self, driver):
        self.driver = driver
        self.active_interface = None
        self.last_dom_scan = 0
        self.dom_scan_interval = 0.3
        self.last_command = ""
        self.last_timestamp = 0
        self.command_cooldown = 3
        self.recent_commands = set()
        self.max_recent_commands = 5
        # DOM command listener task vázlat
        self._listener_task = None
        # Parancs menedzsment
        self.dom_command_listener = None
        # Detektáljuk az aktív interfészt
        self._detect_active_interface()

    def _detect_active_interface(self):
        try:
            current_url = self.driver.current_url.lower()
            if "chat.openai.com" in current_url:
                self.active_interface = "chatgpt"
            elif "claude.ai" in current_url:
                self.active_interface = "claude"
            elif "gemini" in current_url or "bard" in current_url:
                self.active_interface = "gemini"
            elif "copilot" in current_url:
                self.active_interface = "copilot"
            else:
                self.active_interface = "unknown"
            logger.info(f"Detected interface: {self.active_interface}")
        except Exception as e:
            logger.error(f"Error detecting interface: {e}")
            self.active_interface = "unknown"

    def detect_commands(self):
        """
        Parancsok felismerése a DOM-ban több stratégia használatával.
        
        Támogatott parancs formátumok:
        1. [S_COMMAND]{...}[/S_COMMAND] blokkok
        2. PREFIX: tartalom formátumú parancsok (CMD:, CODE:, stb.)
        3. JSON formátumú parancsok speciális blokkokban
        
        Returns:
            str: A detektált parancs szövege, vagy üres string ha nincs parancs
        """
        now = time.time()
        if now - self.last_dom_scan < self.dom_scan_interval:
            return ""
        
        self.last_dom_scan = now
        self._detect_active_interface()
        
        last_detected_command = None
        
        # Interfész-specifikus detektálási stratégiák
        if self.active_interface == "chatgpt":
            # Először keressünk S_COMMAND blokkokat
            command = self._detect_s_command_blocks()
            if command:
                last_detected_command = command
            
            # Ha nincs S_COMMAND blokk, keresünk más parancs formátumokat
            for strategy in [self._detect_from_assistant_role, self._detect_from_markdown]:
                if not last_detected_command:
                    command = strategy()
                    if command:
                        last_detected_command = command
        
        elif self.active_interface == "claude":
            # Claude-specifikus detektálás
            command = self._detect_s_command_blocks()
            if command:
                last_detected_command = command
            else:
                command = self._detect_from_claude()
                if command:
                    last_detected_command = command
        
        elif self.active_interface == "gemini" or self.active_interface == "copilot":
            # Gemini/Copilot-specifikus detektálás
            command = self._detect_s_command_blocks()
            if command:
                last_detected_command = command
            else:
                command = self._detect_from_text_base()
                if command:
                    last_detected_command = command
        
        else:
            # Általános stratégiák minden más interfésznél
            for strategy in [
                self._detect_s_command_blocks,
                self._detect_from_assistant_role, 
                self._detect_from_text_base, 
                self._detect_from_markdown, 
                self._detect_via_javascript
            ]:
                command = strategy()
                if command:
                    last_detected_command = command
                    break
        
        # Ellenőrizzük, hogy új parancs-e
        if last_detected_command and self._is_new_command(last_detected_command, now):
            logger.info(f"Új parancs detektálva: {last_detected_command[:30]}...")
            return last_detected_command
        
        return ""

    def _detect_s_command_blocks(self):
        """
        [S_COMMAND] blokkok keresése a DOM-ban.
        A blokkok lehetnek:
        1. [S_COMMAND]{...}[/S_COMMAND] - JSON tartalommal
        2. [S_COMMAND]parancs[/S_COMMAND] - Szöveges tartalommal
        """
        try:
            # JavaScript keresőscript a parancsblokkok detektálására
            script = """
            function findCommandBlocks() {
                // DOM text elemek keresése
                let elements = document.querySelectorAll('div, p, span, pre, code');
                let text = '';
                
                // Az összes elem szövegének vizsgálata
                for (let el of elements) {
                    const content = el.textContent || '';
                    if (content.includes('[S_COMMAND]') && content.includes('[/S_COMMAND]')) {
                        // Teljes tartalmat visszaadjuk, ha tartalmazza a blokkot
                        return content;
                    }
                    
                    // Ha az elem része lehet egy nagyobb blokknak, összegyűjtjük a szöveget
                    if (content.includes('[S_COMMAND]') || content.includes('[/S_COMMAND]')) {
                        text += content + '\\n';
                    }
                }
                
                // Még megpróbálunk egy teljes DOM keresést
                const fullText = document.body.textContent || '';
                if (fullText.includes('[S_COMMAND]') && fullText.includes('[/S_COMMAND]')) {
                    const startIndex = fullText.indexOf('[S_COMMAND]');
                    const endIndex = fullText.indexOf('[/S_COMMAND]', startIndex) + '[/S_COMMAND]'.length;
                    if (startIndex >= 0 && endIndex > startIndex) {
                        return fullText.substring(startIndex, endIndex);
                    }
                }
                
                return text.length > 0 ? text : '';
            }
            return findCommandBlocks();
            """
            
            result = self.driver.execute_script(script)
            if result:
                # Ha tartalmazza a blokk jelölőket
                if '[S_COMMAND]' in result and '[/S_COMMAND]' in result:
                    return result
            
            return ""
            
        except Exception as e:
            logger.debug(f"Hiba az S_COMMAND blokkok keresése során: {e}")
            return ""

    def _detect_from_assistant_role(self):
        try:
            elements = self.driver.find_elements(By.CSS_SELECTOR, "div[data-message-author-role='assistant'] div.markdown")
            for el in reversed(elements):
                text = el.text.strip()
                if text.startswith(self.COMMAND_PREFIXES):
                    return text
        except Exception:
            pass
        return ""

    def _detect_from_text_base(self):
        try:
            elements = self.driver.find_elements(By.CSS_SELECTOR, "div.text-base")
            for el in reversed(elements):
                text = el.text.strip()
                if text.startswith(self.COMMAND_PREFIXES):
                    return text
        except Exception:
            pass
        return ""

    def _detect_from_markdown(self):
        try:
            elements = self.driver.find_elements(By.CSS_SELECTOR, ".markdown, .prose")
            for el in reversed(elements):
                text = el.text.strip()
                if text.startswith(self.COMMAND_PREFIXES):
                    return text
        except Exception:
            pass
        return ""

    def _detect_from_claude(self):
        try:
            elements = self.driver.find_elements(By.CSS_SELECTOR, ".claude-message-content, .message-content")
            for el in reversed(elements):
                text = el.text.strip()
                if text.startswith(self.COMMAND_PREFIXES):
                    return text
            elements = self.driver.find_elements(By.CSS_SELECTOR, ".message[data-message-author-type='ai']")
            for el in reversed(elements):
                text = el.text.strip()
                if text.startswith(self.COMMAND_PREFIXES):
                    return text
        except Exception:
            pass
        return ""

    def _detect_via_javascript(self):
        try:
            script = '''
            const prefixes = ["CMD:", "CODE:", "INFO:", "FILE:", "TEST:"];
            let allTextElements = document.querySelectorAll('div, p, span, pre');
            for (let i = allTextElements.length - 1; i >= 0; i--) {
                const text = allTextElements[i].textContent.trim();
                for (const prefix of prefixes) {
                    if (text.startsWith(prefix)) {
                        return text;
                    }
                }
            }
            return "";
            '''
            return self.driver.execute_script(script)
        except Exception:
            return ""

    def _is_new_command(self, command, now):
        if not command or not command.startswith(self.COMMAND_PREFIXES):
            return False
        prefix = next((p for p in self.COMMAND_PREFIXES if command.startswith(p)), "")
        if len(command.strip()) <= len(prefix):
            return False
        if "FORCE:" in command[:15]:
            self.last_timestamp = now
            return True
        if (now - self.last_timestamp) <= self.command_cooldown:
            return False
        if command in self.recent_commands:
            return False
        self.recent_commands.add(command)
        if len(self.recent_commands) > self.max_recent_commands:
            self.recent_commands.pop()
        self.last_timestamp = now
        return True

    def send_response(self, message):
        """
        Válasz küldése az AI interfészbe, az aktuálisan detektált interfész típus alapján.
        Ha nem sikerül az elsődleges módszerrel küldeni, akkor kipróbál másodlagos módszereket is.
        
        Args:
            message (str): A küldendő üzenet szövege
            
        Returns:
            bool: True ha sikeres volt a küldés, False egyébként
        """
        # Ha nincs aktív interfész, próbáljuk újradetektálni
        if not self.active_interface or self.active_interface == "unknown":
            self._detect_active_interface()
        
        # Konfigurálható prefix, ami jelöli, hogy projekt válaszról van szó
        response_prefix = "[Project-S] "
        
        # Interfész-specifikus válasz metódusok, prioritás sorrendben
        send_methods = []
        
        if self.active_interface == "chatgpt":
            send_methods = [
                self._send_response_to_chatgpt,
                self._send_response_via_selenium,  # Fallback módszer
            ]
        elif self.active_interface == "claude":
            send_methods = [
                self._send_response_to_claude,
                self._send_response_via_selenium,  # Fallback módszer
            ]
        elif self.active_interface == "gemini":
            send_methods = [
                self._send_response_to_gemini,
                self._send_response_via_selenium,  # Fallback módszer
            ]
        elif self.active_interface == "copilot":
            send_methods = [
                self._send_response_to_copilot,
                self._send_response_via_selenium,  # Fallback módszer
            ]
        else:
            send_methods = [self._send_response_via_selenium]
        
        # Próbáljuk meg az összes metódust, amíg sikeres nem lesz
        message_with_prefix = response_prefix + message
        
        for send_method in send_methods:
            try:
                success = send_method(message_with_prefix)
                if success:
                    logger.info(f"Válasz sikeresen elküldve a {self.active_interface} interfészbe")
                    return True
            except Exception as e:
                logger.warning(f"Hiba a {send_method.__name__} használata során: {e}")
                continue
        
        logger.error(f"Egyik válaszküldési módszer sem működött a {self.active_interface} interfészhez")
        return False

    def _send_response_to_chatgpt(self, message):
        return self._send_response_generic(message, [
            "#prompt-textarea", "textarea[data-id='prompt-textarea']", "textarea.m-0", "textarea[placeholder*='Send a message']", "textarea[tabindex='0']"
        ], [
            "button[data-testid='send-button']", "button.absolute.p-1", "button[class*='bottom-right']", "button[type='submit']"
        ])

    def _send_response_to_claude(self, message):
        return self._send_response_generic(message, [
            "textarea[placeholder*='Message Claude']", "textarea.w-full", "textarea.resize-none", "textarea[placeholder*='Send a message']", "textarea.h-full", "[contenteditable='true']"
        ], [
            "button[aria-label='Send message']", "button.rounded-full", "button.absolute.right-", "button[type='submit']"
        ])

    def _send_response_to_gemini(self, message):
        return self._send_response_generic(message, [
            "textarea[placeholder*='Enter your question']", "textarea.input-area", "textarea.message-input", "textarea.gemini-input"
        ], [
            "button[aria-label='Submit']", "button.send-button", "button.mdc-icon-button", "button[type='submit']"
        ])

    def _send_response_to_copilot(self, message):
        return self._send_response_generic(message, [
            "textarea.input-area", "textarea[placeholder*='Ask me anything']", "textarea.copilot-input", "textarea[aria-label='Ask Copilot']"
        ], [
            "button.send-button", "button[aria-label='Send']", "button.action-button", "button[type='submit']"
        ])

    def _send_response_via_selenium(self, message):
        return self._send_response_generic(message, [
            "#prompt-textarea", "textarea[data-id='prompt-textarea']", "textarea.m-0", "textarea[placeholder*='Send a message']", "textarea[placeholder*='Message']", "textarea[tabindex='0']", "textarea"
        ], [
            "button[data-testid='send-button']", "button[aria-label='Send message']", "button.absolute.p-1", "button[class*='bottom-right']", "button[type='submit']"
        ])

    def _send_response_generic(self, message, textarea_selectors, button_selectors):
        message = self._sanitize_text(message)
        message = "[DOM-Test] " + message
        textarea = self._find_element_with_selectors(textarea_selectors)
        if not textarea:
            logger.error("Textarea not found for response send")
            return False
        if not self._insert_text_with_fallbacks(textarea, message):
            logger.error("Failed to insert text into textarea")
            return False
        if not self._click_button_with_fallbacks(button_selectors, textarea):
            logger.error("Failed to click send button")
            return False
        return True

    def _sanitize_text(self, text):
        emoji_map = {'✔️': '[OK]', '🔍': '[SEARCH]', '⭐': '[STAR]', '🚀': '[ROCKET]', '📝': '[WRITE]', '⏳': '[TIMER]', '✅': '[CHECK]', '❌': '[X]', '⚠️': '[WARNING]', '💫': '[SPARKLE]', '🔥': '[FIRE]', '🌟': '[GLOW]', '🌍': '[EARTH]'}
        for emoji, replacement in emoji_map.items():
            text = text.replace(emoji, replacement)
        return ''.join(c for c in text if ord(c) < 0x10000)

    def _find_element_with_selectors(self, selectors):
        for selector in selectors:
            try:
                element = WebDriverWait(self.driver, 5).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                )
                if element:
                    return element
            except Exception:
                continue
        return None

    def _insert_text_with_fallbacks(self, textarea, message):
        try:
            self.driver.execute_script("arguments[0].scrollIntoView({ behavior: 'smooth', block: 'center' });", textarea)
            time.sleep(0.5)
            try:
                textarea.clear()
                time.sleep(0.2)
            except Exception:
                try:
                    self.driver.execute_script("arguments[0].value = '';", textarea)
                except Exception:
                    pass
            success = False
            try:
                textarea.send_keys(message)
                success = True
            except Exception:
                pass
            if not success:
                try:
                    self.driver.execute_script("""
                        const textarea = arguments[0];
                        const message = arguments[1];
                        textarea.value = message;
                        textarea.dispatchEvent(new Event('input', { bubbles: true }));
                        textarea.dispatchEvent(new Event('change', { bubbles: true }));
                    """, textarea, message)
                    success = True
                except Exception:
                    pass
            if not success:
                try:
                    import pyperclip
                    pyperclip.copy(message)
                    textarea.send_keys(Keys.CONTROL, 'v')
                    time.sleep(0.2)
                    success = True
                except Exception:
                    pass
            return success
        except Exception:
            return False

    def _click_button_with_fallbacks(self, button_selectors, textarea=None):
        try:
            send_button = None
            for selector in button_selectors:
                try:
                    send_button = WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                    )
                    if send_button:
                        break
                except:
                    continue
            if send_button:
                try:
                    self.driver.execute_script("arguments[0].click();", send_button)
                    time.sleep(0.5)
                    return True
                except Exception:
                    try:
                        send_button.click()
                        time.sleep(0.5)
                        return True
                    except Exception:
                        try:
                            from selenium.webdriver.common.action_chains import ActionChains
                            actions = ActionChains(self.driver)
                            actions.move_to_element(send_button).click().perform()
                            time.sleep(0.5)
                            return True
                        except Exception:
                            pass
            if textarea:
                try:
                    textarea.send_keys(Keys.RETURN)
                    time.sleep(0.5)
                    return True
                except Exception:
                    pass
            return False
        except Exception:
            return False

    def _reconnect_browser(self):
        """
        Újracsatlakozás a böngészőhöz ha a kapcsolat megszakadt vagy érvénytelen lett.
        """
        try:
            logger.info("Újracsatlakozási kísérlet a böngészőhöz...")
            
            # Régi driver bezárása, ha létezik
            try:
                if hasattr(self, 'driver') and self.driver:
                    self.driver.quit()
            except Exception as e:
                logger.debug(f"Hiba a driver bezárásánál: {e}")
                
            # Várunk egy kicsit az újracsatlakozás előtt
            time.sleep(2)
            
            # Új driver inicializálása
            self.driver = get_default_driver()
            
            if self.driver:
                # Interfész detektálása
                self._detect_active_interface()
                logger.info(f"Sikeresen újracsatlakoztunk a böngészőhöz, interfész: {self.active_interface}")
                return True
            else:
                logger.error("Nem sikerült újracsatlakozni a böngészőhöz")
                return False
                
        except Exception as e:
            logger.error(f"Újracsatlakozási hiba: {e}")
            return False
    
    def _safely_execute_browser_operation(self, operation_func, *args, **kwargs):
        """
        Biztonságosan hajt végre egy böngésző műveletet, és automatikusan újracsatlakozik hiba esetén.
        
        Args:
            operation_func: A végrehajtandó függvény
            *args, **kwargs: A függvénynek átadandó paraméterek
            
        Returns:
            A függvény visszatérési értéke, vagy None hiba esetén
        """
        max_retries = 2
        
        for attempt in range(max_retries):
            try:
                # Ellenőrizzük, hogy a böngésző még valid-e
                if self.driver:
                    try:
                        # Egyszerű ellenőrzés: lekérdezzük az URL-t
                        current_url = self.driver.current_url
                    except Exception as e:
                        # Ha hiba történt, akkor valószínűleg a driver már érvénytelen
                        if "invalid session id" in str(e).lower():
                            logger.warning("Érvénytelen böngésző session, újracsatlakozás...")
                            self._reconnect_browser()
                        else:
                            logger.error(f"Böngésző művelet hiba: {e}")
                
                # Művelet végrehajtása
                return operation_func(*args, **kwargs)
                
            except Exception as e:
                if "invalid session id" in str(e).lower() and attempt < max_retries - 1:
                    logger.warning(f"Érvénytelen böngésző session, újracsatlakozás ({attempt+1}/{max_retries})...")
                    self._reconnect_browser()
                else:
                    logger.error(f"Böngésző művelet hiba: {e}")
                    if attempt >= max_retries - 1:
                        return None
        
        return None

    # --- API for main.py compatibility ---    async def start(self):
        """
        Elindítja a DOMListener-t és inicializálja a DOM parancs figyelést
        """
        logger.info("DOMListener indítása...")
        
        if self._listener_task is not None:
            logger.warning("A DOMListener már fut, újraindítás...")
            await self.stop()
            
        # DOM parancsfigyelő inicializálása
        try:
            import asyncio
            from core.command_router import router
            
            # Definináljuk a dom_command_listener metódust
            async def dom_command_listener_task():
                logger.info("DOM parancsfigyelő elindult.")
                while True:
                    try:
                        # Parancsok keresése a DOM-ban a detektálási stratégiákkal
                        command = self.detect_commands()
                        
                        # Ha találtunk parancsot, feldolgozzuk
                        if command:
                            logger.info(f"DOM parancs észlelve: {command[:50]}...")
                            result = await self.process_dom_command(command)
                            
                            # Ha van válasz, visszaküldés az interfészbe
                            if result and isinstance(result, dict):
                                # Válasz összefűzése megfelelő formátumra
                                response_text = f"[Project-S Response]\n{str(result)}"
                                success = self.send_response(response_text)
                                if success:
                                    logger.info("DOM válasz sikeresen elküldve")
                                else:
                                    logger.error("Nem sikerült elküldeni a DOM választ")
                    
                    except Exception as e:
                        logger.error(f"Hiba a DOM parancs figyelés során: {str(e)}")
                    
                    # Várunk egy rövid ideig a következő ellenőrzésig
                    await asyncio.sleep(1)
            
            # Periodikus parancsfigyelő task indítása - itt adjuk értéket a dom_command_listener attribútumnak
            self.dom_command_listener = dom_command_listener_task
            self._listener_task = asyncio.create_task(dom_command_listener_task())
            
            logger.info("DOMListener sikeresen elindult")
            return True
            
        except Exception as e:
            logger.error(f"Hiba a DOMListener indítása során: {str(e)}")
            return False    async def stop(self):
        """
        Leállítja a DOMListener-t és megszakítja a futó folyamatokat
        """
        logger.info("DOMListener leállítása...")
        
        try:
            # Listener task leállítása, ha fut
            if self._listener_task and not self._listener_task.done():
                self._listener_task.cancel()
                logger.info("DOM parancsfigyelő task leállítva")
            
            # WebDriver lezárása, ha szükséges
            if hasattr(self, 'driver') and self.driver:
                try:
                    # Ne zárjuk be a böngészőt, csak a kapcsolatot szakítjuk meg
                    # a driver.quit() bezárná a böngészőt is, ami nem kívánt mellékhatás lehet
                    pass
                except Exception as e:
                    logger.warning(f"Hiba a WebDriver lezárása során: {str(e)}")
            
            logger.info("DOMListener sikeresen leállítva")
            return True
            
        except Exception as e:
            logger.error(f"Hiba a DOMListener leállítása során: {str(e)}")
            return False

    async def process_dom_command(self, dom_command):
        """
        Feldolgoz egy DOM parancsot - kivonja a parancs adatokat,
        ellenőrzi a formátumot, és végrehajtja a megfelelő műveletet.
        
        Támogatott formátumok:
        1. [S_COMMAND]{JSON}[/S_COMMAND] - JSON formátumú parancsblokk
        2. CMD:, CODE:, stb. prefix alapú parancsok
        3. Nyers szöveges parancsok megfelelő prefix-szel
        
        Args:
            dom_command (str): A DOM-ból származó nyers parancs szöveg
            
        Returns:
            dict: A végrehajtott parancs eredménye
        """
        logger.info(f"DOM parancs feldolgozása: {dom_command[:50]}...")
        
        try:
            # 1. [S_COMMAND] formátumú parancsok kezelése
            if "[S_COMMAND]" in dom_command and "[/S_COMMAND]" in dom_command:
                # Parancs tartalom kinyerése a blokkból
                start_idx = dom_command.find("[S_COMMAND]") + len("[S_COMMAND]")
                end_idx = dom_command.find("[/S_COMMAND]")
                
                if start_idx > 0 and end_idx > start_idx:
                    command_content = dom_command[start_idx:end_idx].strip()
                    
                    try:
                        # JSON parancs feldolgozása
                        import json
                        cmd_data = json.loads(command_content)
                        
                        # Parancs típus és tartalom kinyerése
                        cmd_type = cmd_data.get("type", "").upper()
                        content = cmd_data.get("content", "")
                        query = cmd_data.get("query", "") # alternatív mező neve
                        options = cmd_data.get("options", {})
                        
                        # Ha a content üres, de van query, akkor használjuk azt
                        if not content and query:
                            content = query
                        
                        logger.info(f"DOM parancs típusa: {cmd_type}, tartalom: {content[:30]}...")
                        
                        # Parancs router integráció
                        from core.command_router import router
                        
                        # Parancs objektum összeállítása a router számára
                        command = {
                            "type": cmd_type,
                            "query": content,
                            "options": options
                        }
                        
                        # Parancs küldése a routernek
                        return await router.route_command(command)
                    
                    except json.JSONDecodeError:
                        logger.warning(f"Nem JSON formátumú S_COMMAND blokk, kezelés nyers szövegként")
                        
                        # Ha nem JSON, akkor kezeljük nyers szövegként
                        from core.command_router import router
                        
                        command = {
                            "type": "ASK",  # Alapértelmezett típus
                            "query": command_content
                        }
                        
                        return await router.route_command(command)
            
            # 2. "CMD:", "CODE:" és egyéb előtagú parancsok kezelése
            for prefix in self.COMMAND_PREFIXES:
                if dom_command.startswith(prefix):
                    cmd_type = prefix.strip(":")
                    content = dom_command[len(prefix):].strip()
                    
                    from core.command_router import router
                    
                    # Parancs objektum összeállítása a router számára
                    command = {
                        "type": cmd_type,
                        "query": content
                    }
                    
                    return await router.route_command(command)
            
            # Ha nem ismert parancs formátum, akkor próbálkozunk ASK parancstípussal
            from core.command_router import router
            command = {
                "type": "ASK",
                "query": dom_command[:500]  # Limitáljuk a hosszt
            }
            
            logger.warning(f"Ismeretlen parancs formátum, ASK-ként kezeljük: {dom_command[:30]}...")
            return await router.route_command(command)
            
        except Exception as e:
            logger.error(f"Hiba a DOM parancs feldolgozása során: {str(e)}")
            return {"status": "error", "message": f"Feldolgozási hiba: {str(e)}"}

# Provide a singleton dom_listener for import compatibility
from selenium import webdriver
import os
import subprocess
import time
import threading

def get_default_driver():
    """
    Inicializálja a Selenium WebDriver-t a megfelelő beállításokkal.
    Ha lehetséges, egy már futó böngészőhöz csatlakozik, különben újat indít.
    """
    try:
        # Először próbáljunk csatlakozni egy már futó böngészőhöz
        options = webdriver.ChromeOptions()
        options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")
        
        try:
            # Chrome elérési útvonal környezeti változóból vagy alapértelmezett
            if os.environ.get("CHROME_DRIVER_PATH"):
                chrome_driver_path = os.environ.get("CHROME_DRIVER_PATH")
                service = webdriver.chrome.service.Service(executable_path=chrome_driver_path)
                driver = webdriver.Chrome(service=service, options=options)
            else:
                # Ha nincs megadva útvonal, automatikus keresés
                driver = webdriver.Chrome(options=options)
                
            logger.info("Sikeresen csatlakoztunk egy futó Chrome böngészőhöz")
            return driver
            
        except Exception as e:
            logger.warning(f"Nem tudtunk csatlakozni futó böngészőhöz: {e}")
            
            # Ha nem sikerült csatlakozni, indítsunk egy új böngészőt
            def start_chrome_process():
                chrome_path = os.environ.get("CHROME_PATH", "chrome")
                cmd = [
                    chrome_path,
                    "--remote-debugging-port=9222",
                    "--user-data-dir=./chrome-profile",
                    "--no-first-run",
                    "--no-default-browser-check"
                ]
                subprocess.Popen(cmd)
            
            # Külön szálban indítsuk a böngészőt, hogy ne blokkolja a főszálat
            thread = threading.Thread(target=start_chrome_process)
            thread.daemon = True  # A fő program leállásával ez a szál is leáll
            thread.start()
            
            # Várunk, hogy a böngésző elinduljon
            time.sleep(3)
            
            # Újra próbáljunk csatlakozni
            options = webdriver.ChromeOptions()
            options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")
            driver = webdriver.Chrome(options=options)
            
            logger.info("Új Chrome böngésző elindítva és csatlakoztatva")
            return driver
            
    except Exception as e:
        # Ha minden más sikertelen, próbáljunk meg headless módban futtatni egy böngészőt
        logger.error(f"Hiba a WebDriver inicializálása során: {e}")
        logger.info("Próbálkozás headless Chrome böngészővel...")
        
        try:
            options = webdriver.ChromeOptions()
            options.add_argument("--headless=new")  # Chrome 109+ szükséges az új headless módhoz
            options.add_argument("--disable-gpu")
            options.add_argument("--window-size=1920,1080")
            driver = webdriver.Chrome(options=options)
            logger.info("Headless Chrome böngésző sikeresen inicializálva")
            return driver
        except Exception as e2:
            logger.error(f"Nem sikerült headless böngészőt sem inicializálni: {e2}")
            return None

# Singleton instance for main.py compatibility
try:
    # Ha van környezeti változóként beállítva, akkor ne próbáljunk driver-t létrehozni
    if os.environ.get("DOM_LISTENER_DISABLE") == "1":
        logger.warning("DOMListener létrehozása kihagyva (DOM_LISTENER_DISABLE=1)")
        dom_listener = None
    else:
        driver = get_default_driver()
        if driver:
            dom_listener = DOMListener(driver)
            logger.info("DOMListener singleton sikeresen létrehozva")
        else:
            # Ha nem sikerült driver-t létrehozni, inicializáljuk None-nal
            logger.warning("Nem sikerült WebDriver-t inicializálni, DOMListener korlátozott funkcionalitással")
            dom_listener = DOMListener(None)
except Exception as e:
    dom_listener = None
    logger.error(f"Nem sikerült létrehozni a DOMListener singleton-t: {e}")
