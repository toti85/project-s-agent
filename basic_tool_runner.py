"""
Egyszer≈± Project-S tool rendszer teszt
---------------------------------------
Ez a modul egy egyszer≈±, √∂n√°ll√≥ futtathat√≥ p√©ld√°t ad a Project-S eszk√∂z√∂k
haszn√°lat√°ra, LangGraph n√©lk√ºl.
"""

import asyncio
import logging
import os
import sys
from pathlib import Path
import json
from datetime import datetime
import traceback

# Hozz√°adjuk a projekt gy√∂k√©rk√∂nyvt√°r√°t a keres√©si √∫tvonalhoz
project_root = Path(__file__).parent
if str(project_root) not in sys.path:
    sys.path.append(str(project_root))

# Konfigur√°ljuk a napl√≥z√°st
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger("basic_tool_runner")

# Project-S importok
try:
    from tools import register_all_tools
    from tools.file_tools import FileSearchTool, FileReadTool, FileWriteTool
    from tools.web_tools import WebPageFetchTool
    logger.info("Project-S eszk√∂z modulok sikeresen import√°lva")
except ImportError as e:
    logger.error(f"Hiba t√∂rt√©nt a Project-S modulok import√°l√°sakor: {e}")
    sys.exit(1)

async def run_tools_sequence():
    """
    Egy egyszer≈± eszk√∂zsorozat futtat√°sa, amely bemutatja a Project-S eszk√∂z√∂ket.
    """
    logger.info("Project-S eszk√∂z sorozat ind√≠t√°sa...")
    
    try:
        # 1. Eszk√∂z√∂k regisztr√°l√°sa
        await register_all_tools()
        logger.info("‚úÖ Eszk√∂z√∂k sikeresen regisztr√°lva")
          # 2. F√°jlok keres√©se
        file_search_tool = FileSearchTool()
        search_result = await file_search_tool.execute(
            pattern="**/*.{json,yaml,md}",
            root_dir=str(project_root),
            recursive=True
        )
        
        if search_result.get("success", False):
            files_found = search_result.get("files", [])
            logger.info(f"‚úÖ F√°jl keres√©s sikeres, {len(files_found)} f√°jl tal√°lat")
            
            # A tal√°latok egy r√©sz√©nek kijelz√©se
            for i, file_path in enumerate(files_found[:5]):
                logger.info(f"   - {file_path}")
                
            if len(files_found) > 5:
                logger.info(f"   ... √©s m√©g {len(files_found) - 5} tov√°bbi f√°jl")
        else:
            logger.error(f"‚ùå F√°jl keres√©s sikertelen: {search_result.get('error')}")
        
        # 3. Weboldal let√∂lt√©se
        web_tool = WebPageFetchTool()
        web_result = await web_tool.execute(
            url="https://python.org",
            extract_text=True
        )
        
        if web_result.get("success", False):
            text_content = web_result.get("text", "")
            logger.info(f"‚úÖ Weboldal let√∂ltve, {len(text_content)} karakter")
            logger.info(f"   Els≈ë 100 karakter: {text_content[:100]}...")
        else:
            logger.error(f"‚ùå Weboldal let√∂lt√©s sikertelen: {web_result.get('error')}")
        
        # 4. Jelent√©s k√©sz√≠t√©se √©s ment√©se
        report_data = {
            "timestamp": datetime.now().isoformat(),
            "test_name": "Project-S Tool Runner Test",
            "results": [
                {
                    "tool": "FileSearchTool",
                    "success": search_result.get("success", False),
                    "files_found": len(search_result.get("files", [])) if search_result.get("success", False) else 0
                },
                {
                    "tool": "WebPageFetchTool",
                    "success": web_result.get("success", False),
                    "content_length": len(web_result.get("text", "")) if web_result.get("success", False) else 0
                }
            ]
        }
        
        # K√©sz√≠ts√ºk el az outputs k√∂nyvt√°rat, ha nem l√©tezik
        outputs_dir = project_root / "outputs"
        outputs_dir.mkdir(exist_ok=True)
        
        # Elments√ºk a jelent√©st
        report_path = outputs_dir / "basic_tool_runner_report.json"
        
        file_write_tool = FileWriteTool()
        write_result = await file_write_tool.execute(
            path=str(report_path),
            content=json.dumps(report_data, indent=2),
            create_dirs=True
        )
        
        if write_result.get("success", False):
            logger.info(f"‚úÖ Jelent√©s sikeresen mentve: {report_path}")
        else:
            logger.error(f"‚ùå Jelent√©s ment√©se sikertelen: {write_result.get('error')}")
        
        return {
            "success": True,
            "report_path": str(report_path) if write_result.get("success", False) else None,
            "tools_executed": ["FileSearchTool", "WebPageFetchTool", "FileWriteTool"]
        }
        
    except Exception as e:
        logger.error(f"‚ùå Hiba t√∂rt√©nt az eszk√∂z√∂k futtat√°sa k√∂zben: {str(e)}")
        traceback.print_exc()
        return {
            "success": False,
            "error": str(e)
        }

async def main():
    """
    F≈ë bel√©p√©si pont az eszk√∂z√∂k futtat√°s√°hoz.
    """
    logger.info("=== Project-S Tool Runner P√©lda ===")
    
    result = await run_tools_sequence()
    
    if result.get("success", False):
        logger.info("üéâ Az eszk√∂z√∂k sikeresen v√©grehajtva!")
        if result.get("report_path"):
            logger.info(f"üìÑ A jelent√©s el√©rhet≈ë: {result['report_path']}")
    else:
        logger.error(f"üí• Az eszk√∂z√∂k futtat√°sa sikertelen: {result.get('error')}")
    
    return result

if __name__ == "__main__":
    result = asyncio.run(main())
    
    print("\n=== Tool Runner Eredm√©ny ===")
    if result.get("success", False):
        print("‚úÖ A Project-S eszk√∂z√∂k sikeresen futottak!")
        print(f"üìä V√©grehajtott eszk√∂z√∂k: {', '.join(result.get('tools_executed', []))}")
        if result.get("report_path"):
            print(f"üìÑ Jelent√©s: {result['report_path']}")
    else:
        print(f"‚ùå Hiba: {result.get('error', 'Ismeretlen hiba')}")
